{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOuZtfegk4CkhJ4WeAFB9uM"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8M7fLXNZBrRC"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('netflix_data.csv')\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "RallpZTeGFAu",
        "outputId": "7dfe63ad-0dd4-4798-f4ea-53be85c18169"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       show_id     type                                        title  \\\n",
              "0     81145628    Movie      Norm of the North: King Sized Adventure   \n",
              "1     80117401    Movie                   Jandino: Whatever it Takes   \n",
              "2     70234439  TV Show                           Transformers Prime   \n",
              "3     80058654  TV Show             Transformers: Robots in Disguise   \n",
              "4     80125979    Movie                                 #realityhigh   \n",
              "...        ...      ...                                          ...   \n",
              "6229  80000063  TV Show                                 Red vs. Blue   \n",
              "6230  70286564  TV Show                                        Maron   \n",
              "6231  80116008    Movie       Little Baby Bum: Nursery Rhyme Friends   \n",
              "6232  70281022  TV Show  A Young Doctor's Notebook and Other Stories   \n",
              "6233  70153404  TV Show                                      Friends   \n",
              "\n",
              "                      director  \\\n",
              "0     Richard Finn, Tim Maltby   \n",
              "1                          NaN   \n",
              "2                          NaN   \n",
              "3                          NaN   \n",
              "4             Fernando Lebrija   \n",
              "...                        ...   \n",
              "6229                       NaN   \n",
              "6230                       NaN   \n",
              "6231                       NaN   \n",
              "6232                       NaN   \n",
              "6233                       NaN   \n",
              "\n",
              "                                                   cast  \\\n",
              "0     Alan Marriott, Andrew Toth, Brian Dobson, Cole...   \n",
              "1                                      Jandino Asporaat   \n",
              "2     Peter Cullen, Sumalee Montano, Frank Welker, J...   \n",
              "3     Will Friedle, Darren Criss, Constance Zimmer, ...   \n",
              "4     Nesta Cooper, Kate Walsh, John Michael Higgins...   \n",
              "...                                                 ...   \n",
              "6229  Burnie Burns, Jason Salda√±a, Gustavo Sorola, G...   \n",
              "6230  Marc Maron, Judd Hirsch, Josh Brener, Nora Zeh...   \n",
              "6231                                                NaN   \n",
              "6232  Daniel Radcliffe, Jon Hamm, Adam Godley, Chris...   \n",
              "6233  Jennifer Aniston, Courteney Cox, Lisa Kudrow, ...   \n",
              "\n",
              "                                       country         date_added  \\\n",
              "0     United States, India, South Korea, China  September 9, 2019   \n",
              "1                               United Kingdom  September 9, 2016   \n",
              "2                                United States  September 8, 2018   \n",
              "3                                United States  September 8, 2018   \n",
              "4                                United States  September 8, 2017   \n",
              "...                                        ...                ...   \n",
              "6229                             United States                NaN   \n",
              "6230                             United States                NaN   \n",
              "6231                                       NaN                NaN   \n",
              "6232                            United Kingdom                NaN   \n",
              "6233                             United States                NaN   \n",
              "\n",
              "      release_year    rating    duration  \\\n",
              "0             2019     TV-PG      90 min   \n",
              "1             2016     TV-MA      94 min   \n",
              "2             2013  TV-Y7-FV    1 Season   \n",
              "3             2016     TV-Y7    1 Season   \n",
              "4             2017     TV-14      99 min   \n",
              "...            ...       ...         ...   \n",
              "6229          2015        NR  13 Seasons   \n",
              "6230          2016     TV-MA   4 Seasons   \n",
              "6231          2016       NaN      60 min   \n",
              "6232          2013     TV-MA   2 Seasons   \n",
              "6233          2003     TV-14  10 Seasons   \n",
              "\n",
              "                                              listed_in  \\\n",
              "0                    Children & Family Movies, Comedies   \n",
              "1                                       Stand-Up Comedy   \n",
              "2                                              Kids' TV   \n",
              "3                                              Kids' TV   \n",
              "4                                              Comedies   \n",
              "...                                                 ...   \n",
              "6229  TV Action & Adventure, TV Comedies, TV Sci-Fi ...   \n",
              "6230                                        TV Comedies   \n",
              "6231                                             Movies   \n",
              "6232           British TV Shows, TV Comedies, TV Dramas   \n",
              "6233                     Classic & Cult TV, TV Comedies   \n",
              "\n",
              "                                            description  \n",
              "0     Before planning an awesome wedding for his gra...  \n",
              "1     Jandino Asporaat riffs on the challenges of ra...  \n",
              "2     With the help of three human allies, the Autob...  \n",
              "3     When a prison ship crash unleashes hundreds of...  \n",
              "4     When nerdy high schooler Dani finally attracts...  \n",
              "...                                                 ...  \n",
              "6229  This parody of first-person shooter games, mil...  \n",
              "6230  Marc Maron stars as Marc Maron, who interviews...  \n",
              "6231  Nursery rhymes and original music for children...  \n",
              "6232  Set during the Russian Revolution, this comic ...  \n",
              "6233  This hit sitcom follows the merry misadventure...  \n",
              "\n",
              "[6234 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-48ff7dc6-da3c-45a4-b064-d35e3a71d788\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>show_id</th>\n",
              "      <th>type</th>\n",
              "      <th>title</th>\n",
              "      <th>director</th>\n",
              "      <th>cast</th>\n",
              "      <th>country</th>\n",
              "      <th>date_added</th>\n",
              "      <th>release_year</th>\n",
              "      <th>rating</th>\n",
              "      <th>duration</th>\n",
              "      <th>listed_in</th>\n",
              "      <th>description</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>81145628</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Norm of the North: King Sized Adventure</td>\n",
              "      <td>Richard Finn, Tim Maltby</td>\n",
              "      <td>Alan Marriott, Andrew Toth, Brian Dobson, Cole...</td>\n",
              "      <td>United States, India, South Korea, China</td>\n",
              "      <td>September 9, 2019</td>\n",
              "      <td>2019</td>\n",
              "      <td>TV-PG</td>\n",
              "      <td>90 min</td>\n",
              "      <td>Children &amp; Family Movies, Comedies</td>\n",
              "      <td>Before planning an awesome wedding for his gra...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>80117401</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Jandino: Whatever it Takes</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Jandino Asporaat</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>September 9, 2016</td>\n",
              "      <td>2016</td>\n",
              "      <td>TV-MA</td>\n",
              "      <td>94 min</td>\n",
              "      <td>Stand-Up Comedy</td>\n",
              "      <td>Jandino Asporaat riffs on the challenges of ra...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>70234439</td>\n",
              "      <td>TV Show</td>\n",
              "      <td>Transformers Prime</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Peter Cullen, Sumalee Montano, Frank Welker, J...</td>\n",
              "      <td>United States</td>\n",
              "      <td>September 8, 2018</td>\n",
              "      <td>2013</td>\n",
              "      <td>TV-Y7-FV</td>\n",
              "      <td>1 Season</td>\n",
              "      <td>Kids' TV</td>\n",
              "      <td>With the help of three human allies, the Autob...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>80058654</td>\n",
              "      <td>TV Show</td>\n",
              "      <td>Transformers: Robots in Disguise</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Will Friedle, Darren Criss, Constance Zimmer, ...</td>\n",
              "      <td>United States</td>\n",
              "      <td>September 8, 2018</td>\n",
              "      <td>2016</td>\n",
              "      <td>TV-Y7</td>\n",
              "      <td>1 Season</td>\n",
              "      <td>Kids' TV</td>\n",
              "      <td>When a prison ship crash unleashes hundreds of...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>80125979</td>\n",
              "      <td>Movie</td>\n",
              "      <td>#realityhigh</td>\n",
              "      <td>Fernando Lebrija</td>\n",
              "      <td>Nesta Cooper, Kate Walsh, John Michael Higgins...</td>\n",
              "      <td>United States</td>\n",
              "      <td>September 8, 2017</td>\n",
              "      <td>2017</td>\n",
              "      <td>TV-14</td>\n",
              "      <td>99 min</td>\n",
              "      <td>Comedies</td>\n",
              "      <td>When nerdy high schooler Dani finally attracts...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6229</th>\n",
              "      <td>80000063</td>\n",
              "      <td>TV Show</td>\n",
              "      <td>Red vs. Blue</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Burnie Burns, Jason Salda√±a, Gustavo Sorola, G...</td>\n",
              "      <td>United States</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2015</td>\n",
              "      <td>NR</td>\n",
              "      <td>13 Seasons</td>\n",
              "      <td>TV Action &amp; Adventure, TV Comedies, TV Sci-Fi ...</td>\n",
              "      <td>This parody of first-person shooter games, mil...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6230</th>\n",
              "      <td>70286564</td>\n",
              "      <td>TV Show</td>\n",
              "      <td>Maron</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Marc Maron, Judd Hirsch, Josh Brener, Nora Zeh...</td>\n",
              "      <td>United States</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2016</td>\n",
              "      <td>TV-MA</td>\n",
              "      <td>4 Seasons</td>\n",
              "      <td>TV Comedies</td>\n",
              "      <td>Marc Maron stars as Marc Maron, who interviews...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6231</th>\n",
              "      <td>80116008</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Little Baby Bum: Nursery Rhyme Friends</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2016</td>\n",
              "      <td>NaN</td>\n",
              "      <td>60 min</td>\n",
              "      <td>Movies</td>\n",
              "      <td>Nursery rhymes and original music for children...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6232</th>\n",
              "      <td>70281022</td>\n",
              "      <td>TV Show</td>\n",
              "      <td>A Young Doctor's Notebook and Other Stories</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Daniel Radcliffe, Jon Hamm, Adam Godley, Chris...</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2013</td>\n",
              "      <td>TV-MA</td>\n",
              "      <td>2 Seasons</td>\n",
              "      <td>British TV Shows, TV Comedies, TV Dramas</td>\n",
              "      <td>Set during the Russian Revolution, this comic ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6233</th>\n",
              "      <td>70153404</td>\n",
              "      <td>TV Show</td>\n",
              "      <td>Friends</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Jennifer Aniston, Courteney Cox, Lisa Kudrow, ...</td>\n",
              "      <td>United States</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2003</td>\n",
              "      <td>TV-14</td>\n",
              "      <td>10 Seasons</td>\n",
              "      <td>Classic &amp; Cult TV, TV Comedies</td>\n",
              "      <td>This hit sitcom follows the merry misadventure...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6234 rows √ó 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-48ff7dc6-da3c-45a4-b064-d35e3a71d788')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-48ff7dc6-da3c-45a4-b064-d35e3a71d788 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-48ff7dc6-da3c-45a4-b064-d35e3a71d788');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e8175b98-4570-42cf-956e-73723090c29e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e8175b98-4570-42cf-956e-73723090c29e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e8175b98-4570-42cf-956e-73723090c29e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_85dcdca9-24b1-4fe1-9076-bab33e079b8a\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_85dcdca9-24b1-4fe1-9076-bab33e079b8a button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 6234,\n  \"fields\": [\n    {\n      \"column\": \"show_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10942964,\n        \"min\": 247747,\n        \"max\": 81235729,\n        \"num_unique_values\": 6234,\n        \"samples\": [\n          81025317,\n          80184422,\n          80232914\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"TV Show\",\n          \"Movie\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6172,\n        \"samples\": [\n          \"Hulk Vs.\",\n          \"Khan: No. 1 Crime Hunter\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"director\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3301,\n        \"samples\": [\n          \"Jacob LaMendola\",\n          \"Marita Grabiak\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cast\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5469,\n        \"samples\": [\n          \"Mick Rock\",\n          \"Dakore Akande, Ireti Doyle, Nse Ikpe-Etim, Omoni Oboli\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 554,\n        \"samples\": [\n          \"Switzerland\",\n          \"Argentina\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date_added\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1524,\n        \"samples\": [\n          \"February 24, 2016\",\n          \"September 14, 2019\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"release_year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 1925,\n        \"max\": 2020,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          2014,\n          1944\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"TV-G\",\n          \"G\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 201,\n        \"samples\": [\n          \"151 min\",\n          \"79 min\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"listed_in\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 461,\n        \"samples\": [\n          \"Action & Adventure, Independent Movies, Sci-Fi & Fantasy\",\n          \"Comedies, Dramas, International Movies\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6226,\n        \"samples\": [\n          \"Learning that her father has married a woman her own age, Kanaya leaves home, only to get into an accident that lands her in a haunted hospital.\",\n          \"Born with supernatural strength, Bong-soon fights evil and procures justice while getting tangled in a love triangle with her CEO boss and cop crush.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# data types\n",
        "df.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "hrh7ENxdLXMF",
        "outputId": "c3dbfe51-b68b-4336-be85-8616d3757ce5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "show_id          int64\n",
              "type            object\n",
              "title           object\n",
              "director        object\n",
              "cast            object\n",
              "country         object\n",
              "date_added      object\n",
              "release_year     int64\n",
              "rating          object\n",
              "duration        object\n",
              "listed_in       object\n",
              "description     object\n",
              "dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>show_id</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>type</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>title</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>director</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cast</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>country</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>date_added</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>release_year</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>rating</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>duration</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>listed_in</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>description</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# shape of the dataframe\n",
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EAtRbX-AMBGQ",
        "outputId": "93fb32ee-79a2-48cb-fd64-2c0bd0a89818"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(6234, 12)"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Identifying the Missing Values**"
      ],
      "metadata": {
        "id": "F7Q7oIRaMvI5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# number of rows missing in each columns\n",
        "df.isnull()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 444
        },
        "id": "KmKpfxEFM1Ub",
        "outputId": "c1323f3d-32ce-4b3b-fe51-cf70be55597c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      show_id   type  title  director   cast  country  date_added  \\\n",
              "0       False  False  False     False  False    False       False   \n",
              "1       False  False  False      True  False    False       False   \n",
              "2       False  False  False      True  False    False       False   \n",
              "3       False  False  False      True  False    False       False   \n",
              "4       False  False  False     False  False    False       False   \n",
              "...       ...    ...    ...       ...    ...      ...         ...   \n",
              "6229    False  False  False      True  False    False        True   \n",
              "6230    False  False  False      True  False    False        True   \n",
              "6231    False  False  False      True   True     True        True   \n",
              "6232    False  False  False      True  False    False        True   \n",
              "6233    False  False  False      True  False    False        True   \n",
              "\n",
              "      release_year  rating  duration  listed_in  description  \n",
              "0            False   False     False      False        False  \n",
              "1            False   False     False      False        False  \n",
              "2            False   False     False      False        False  \n",
              "3            False   False     False      False        False  \n",
              "4            False   False     False      False        False  \n",
              "...            ...     ...       ...        ...          ...  \n",
              "6229         False   False     False      False        False  \n",
              "6230         False   False     False      False        False  \n",
              "6231         False    True     False      False        False  \n",
              "6232         False   False     False      False        False  \n",
              "6233         False   False     False      False        False  \n",
              "\n",
              "[6234 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4b9b8f9d-5b05-4b58-b94e-426de15fca49\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>show_id</th>\n",
              "      <th>type</th>\n",
              "      <th>title</th>\n",
              "      <th>director</th>\n",
              "      <th>cast</th>\n",
              "      <th>country</th>\n",
              "      <th>date_added</th>\n",
              "      <th>release_year</th>\n",
              "      <th>rating</th>\n",
              "      <th>duration</th>\n",
              "      <th>listed_in</th>\n",
              "      <th>description</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6229</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6230</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6231</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6232</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6233</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6234 rows √ó 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4b9b8f9d-5b05-4b58-b94e-426de15fca49')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4b9b8f9d-5b05-4b58-b94e-426de15fca49 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4b9b8f9d-5b05-4b58-b94e-426de15fca49');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-456ffa5d-34c2-47bc-99e0-088c5fee598c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-456ffa5d-34c2-47bc-99e0-088c5fee598c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-456ffa5d-34c2-47bc-99e0-088c5fee598c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 6234,\n  \"fields\": [\n    {\n      \"column\": \"show_id\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"type\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"director\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cast\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date_added\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"release_year\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"listed_in\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"description\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# sum of all the value that are true based on the above\n",
        "# number of row missing in each columns\n",
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "blTkT7TiNTBS",
        "outputId": "6bd886c3-e625-45a4-8a90-32407e775dd2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "show_id            0\n",
              "type               0\n",
              "title              0\n",
              "director        1969\n",
              "cast             570\n",
              "country          476\n",
              "date_added        11\n",
              "release_year       0\n",
              "rating            10\n",
              "duration           0\n",
              "listed_in          0\n",
              "description        0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>show_id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>type</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>title</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>director</th>\n",
              "      <td>1969</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cast</th>\n",
              "      <td>570</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>country</th>\n",
              "      <td>476</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>date_added</th>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>release_year</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>rating</th>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>duration</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>listed_in</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>description</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# sorting the number of rows that are null in descending order\n",
        "df1=df.isnull().sum().sort_values(ascending=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "vfvfykqfNwM-",
        "outputId": "7bee398b-a40f-4702-8d05-c56736a6fa9c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "director        1969\n",
              "cast             570\n",
              "country          476\n",
              "date_added        11\n",
              "rating            10\n",
              "show_id            0\n",
              "type               0\n",
              "title              0\n",
              "release_year       0\n",
              "duration           0\n",
              "listed_in          0\n",
              "description        0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>director</th>\n",
              "      <td>1969</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cast</th>\n",
              "      <td>570</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>country</th>\n",
              "      <td>476</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>date_added</th>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>rating</th>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>show_id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>type</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>title</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>release_year</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>duration</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>listed_in</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>description</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RpCKawikQd0J",
        "outputId": "988ca58b-d728-4f53-fffb-a1fc9b2e8904"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['show_id', 'type', 'title', 'director', 'cast', 'country', 'date_added',\n",
              "       'release_year', 'rating', 'duration', 'listed_in', 'description'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# percentage of the null value in columns\n",
        "for columns in df.columns:\n",
        "  percentages = df[columns].isnull().sum()*100/len(df)\n",
        "  print(f\"{columns} : {round(percentages, 2)}%\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Qs3jpMTwOJHN",
        "outputId": "8aec45ac-d69a-4489-bc75-7f303e33c0ff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "show_id : 0.0%\n",
            "type : 0.0%\n",
            "title : 0.0%\n",
            "director : 31.58%\n",
            "cast : 9.14%\n",
            "country : 7.64%\n",
            "date_added : 0.18%\n",
            "release_year : 0.0%\n",
            "rating : 0.16%\n",
            "duration : 0.0%\n",
            "listed_in : 0.0%\n",
            "description : 0.0%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "oXDykuttT-qG",
        "outputId": "74a200d1-c5e8-4e7a-a1d0-da0f4948b015"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       show_id     type                                        title  \\\n",
              "0     81145628    Movie      Norm of the North: King Sized Adventure   \n",
              "1     80117401    Movie                   Jandino: Whatever it Takes   \n",
              "2     70234439  TV Show                           Transformers Prime   \n",
              "3     80058654  TV Show             Transformers: Robots in Disguise   \n",
              "4     80125979    Movie                                 #realityhigh   \n",
              "...        ...      ...                                          ...   \n",
              "6229  80000063  TV Show                                 Red vs. Blue   \n",
              "6230  70286564  TV Show                                        Maron   \n",
              "6231  80116008    Movie       Little Baby Bum: Nursery Rhyme Friends   \n",
              "6232  70281022  TV Show  A Young Doctor's Notebook and Other Stories   \n",
              "6233  70153404  TV Show                                      Friends   \n",
              "\n",
              "                      director  \\\n",
              "0     Richard Finn, Tim Maltby   \n",
              "1                          NaN   \n",
              "2                          NaN   \n",
              "3                          NaN   \n",
              "4             Fernando Lebrija   \n",
              "...                        ...   \n",
              "6229                       NaN   \n",
              "6230                       NaN   \n",
              "6231                       NaN   \n",
              "6232                       NaN   \n",
              "6233                       NaN   \n",
              "\n",
              "                                                   cast  \\\n",
              "0     Alan Marriott, Andrew Toth, Brian Dobson, Cole...   \n",
              "1                                      Jandino Asporaat   \n",
              "2     Peter Cullen, Sumalee Montano, Frank Welker, J...   \n",
              "3     Will Friedle, Darren Criss, Constance Zimmer, ...   \n",
              "4     Nesta Cooper, Kate Walsh, John Michael Higgins...   \n",
              "...                                                 ...   \n",
              "6229  Burnie Burns, Jason Salda√±a, Gustavo Sorola, G...   \n",
              "6230  Marc Maron, Judd Hirsch, Josh Brener, Nora Zeh...   \n",
              "6231                                                NaN   \n",
              "6232  Daniel Radcliffe, Jon Hamm, Adam Godley, Chris...   \n",
              "6233  Jennifer Aniston, Courteney Cox, Lisa Kudrow, ...   \n",
              "\n",
              "                                       country         date_added  \\\n",
              "0     United States, India, South Korea, China  September 9, 2019   \n",
              "1                               United Kingdom  September 9, 2016   \n",
              "2                                United States  September 8, 2018   \n",
              "3                                United States  September 8, 2018   \n",
              "4                                United States  September 8, 2017   \n",
              "...                                        ...                ...   \n",
              "6229                             United States                NaN   \n",
              "6230                             United States                NaN   \n",
              "6231                                       NaN                NaN   \n",
              "6232                            United Kingdom                NaN   \n",
              "6233                             United States                NaN   \n",
              "\n",
              "      release_year    rating    duration  \\\n",
              "0             2019     TV-PG      90 min   \n",
              "1             2016     TV-MA      94 min   \n",
              "2             2013  TV-Y7-FV    1 Season   \n",
              "3             2016     TV-Y7    1 Season   \n",
              "4             2017     TV-14      99 min   \n",
              "...            ...       ...         ...   \n",
              "6229          2015        NR  13 Seasons   \n",
              "6230          2016     TV-MA   4 Seasons   \n",
              "6231          2016       NaN      60 min   \n",
              "6232          2013     TV-MA   2 Seasons   \n",
              "6233          2003     TV-14  10 Seasons   \n",
              "\n",
              "                                              listed_in  \\\n",
              "0                    Children & Family Movies, Comedies   \n",
              "1                                       Stand-Up Comedy   \n",
              "2                                              Kids' TV   \n",
              "3                                              Kids' TV   \n",
              "4                                              Comedies   \n",
              "...                                                 ...   \n",
              "6229  TV Action & Adventure, TV Comedies, TV Sci-Fi ...   \n",
              "6230                                        TV Comedies   \n",
              "6231                                             Movies   \n",
              "6232           British TV Shows, TV Comedies, TV Dramas   \n",
              "6233                     Classic & Cult TV, TV Comedies   \n",
              "\n",
              "                                            description  \n",
              "0     Before planning an awesome wedding for his gra...  \n",
              "1     Jandino Asporaat riffs on the challenges of ra...  \n",
              "2     With the help of three human allies, the Autob...  \n",
              "3     When a prison ship crash unleashes hundreds of...  \n",
              "4     When nerdy high schooler Dani finally attracts...  \n",
              "...                                                 ...  \n",
              "6229  This parody of first-person shooter games, mil...  \n",
              "6230  Marc Maron stars as Marc Maron, who interviews...  \n",
              "6231  Nursery rhymes and original music for children...  \n",
              "6232  Set during the Russian Revolution, this comic ...  \n",
              "6233  This hit sitcom follows the merry misadventure...  \n",
              "\n",
              "[6234 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-baab8d3d-229c-40d7-b777-046884657125\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>show_id</th>\n",
              "      <th>type</th>\n",
              "      <th>title</th>\n",
              "      <th>director</th>\n",
              "      <th>cast</th>\n",
              "      <th>country</th>\n",
              "      <th>date_added</th>\n",
              "      <th>release_year</th>\n",
              "      <th>rating</th>\n",
              "      <th>duration</th>\n",
              "      <th>listed_in</th>\n",
              "      <th>description</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>81145628</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Norm of the North: King Sized Adventure</td>\n",
              "      <td>Richard Finn, Tim Maltby</td>\n",
              "      <td>Alan Marriott, Andrew Toth, Brian Dobson, Cole...</td>\n",
              "      <td>United States, India, South Korea, China</td>\n",
              "      <td>September 9, 2019</td>\n",
              "      <td>2019</td>\n",
              "      <td>TV-PG</td>\n",
              "      <td>90 min</td>\n",
              "      <td>Children &amp; Family Movies, Comedies</td>\n",
              "      <td>Before planning an awesome wedding for his gra...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>80117401</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Jandino: Whatever it Takes</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Jandino Asporaat</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>September 9, 2016</td>\n",
              "      <td>2016</td>\n",
              "      <td>TV-MA</td>\n",
              "      <td>94 min</td>\n",
              "      <td>Stand-Up Comedy</td>\n",
              "      <td>Jandino Asporaat riffs on the challenges of ra...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>70234439</td>\n",
              "      <td>TV Show</td>\n",
              "      <td>Transformers Prime</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Peter Cullen, Sumalee Montano, Frank Welker, J...</td>\n",
              "      <td>United States</td>\n",
              "      <td>September 8, 2018</td>\n",
              "      <td>2013</td>\n",
              "      <td>TV-Y7-FV</td>\n",
              "      <td>1 Season</td>\n",
              "      <td>Kids' TV</td>\n",
              "      <td>With the help of three human allies, the Autob...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>80058654</td>\n",
              "      <td>TV Show</td>\n",
              "      <td>Transformers: Robots in Disguise</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Will Friedle, Darren Criss, Constance Zimmer, ...</td>\n",
              "      <td>United States</td>\n",
              "      <td>September 8, 2018</td>\n",
              "      <td>2016</td>\n",
              "      <td>TV-Y7</td>\n",
              "      <td>1 Season</td>\n",
              "      <td>Kids' TV</td>\n",
              "      <td>When a prison ship crash unleashes hundreds of...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>80125979</td>\n",
              "      <td>Movie</td>\n",
              "      <td>#realityhigh</td>\n",
              "      <td>Fernando Lebrija</td>\n",
              "      <td>Nesta Cooper, Kate Walsh, John Michael Higgins...</td>\n",
              "      <td>United States</td>\n",
              "      <td>September 8, 2017</td>\n",
              "      <td>2017</td>\n",
              "      <td>TV-14</td>\n",
              "      <td>99 min</td>\n",
              "      <td>Comedies</td>\n",
              "      <td>When nerdy high schooler Dani finally attracts...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6229</th>\n",
              "      <td>80000063</td>\n",
              "      <td>TV Show</td>\n",
              "      <td>Red vs. Blue</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Burnie Burns, Jason Salda√±a, Gustavo Sorola, G...</td>\n",
              "      <td>United States</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2015</td>\n",
              "      <td>NR</td>\n",
              "      <td>13 Seasons</td>\n",
              "      <td>TV Action &amp; Adventure, TV Comedies, TV Sci-Fi ...</td>\n",
              "      <td>This parody of first-person shooter games, mil...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6230</th>\n",
              "      <td>70286564</td>\n",
              "      <td>TV Show</td>\n",
              "      <td>Maron</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Marc Maron, Judd Hirsch, Josh Brener, Nora Zeh...</td>\n",
              "      <td>United States</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2016</td>\n",
              "      <td>TV-MA</td>\n",
              "      <td>4 Seasons</td>\n",
              "      <td>TV Comedies</td>\n",
              "      <td>Marc Maron stars as Marc Maron, who interviews...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6231</th>\n",
              "      <td>80116008</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Little Baby Bum: Nursery Rhyme Friends</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2016</td>\n",
              "      <td>NaN</td>\n",
              "      <td>60 min</td>\n",
              "      <td>Movies</td>\n",
              "      <td>Nursery rhymes and original music for children...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6232</th>\n",
              "      <td>70281022</td>\n",
              "      <td>TV Show</td>\n",
              "      <td>A Young Doctor's Notebook and Other Stories</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Daniel Radcliffe, Jon Hamm, Adam Godley, Chris...</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2013</td>\n",
              "      <td>TV-MA</td>\n",
              "      <td>2 Seasons</td>\n",
              "      <td>British TV Shows, TV Comedies, TV Dramas</td>\n",
              "      <td>Set during the Russian Revolution, this comic ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6233</th>\n",
              "      <td>70153404</td>\n",
              "      <td>TV Show</td>\n",
              "      <td>Friends</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Jennifer Aniston, Courteney Cox, Lisa Kudrow, ...</td>\n",
              "      <td>United States</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2003</td>\n",
              "      <td>TV-14</td>\n",
              "      <td>10 Seasons</td>\n",
              "      <td>Classic &amp; Cult TV, TV Comedies</td>\n",
              "      <td>This hit sitcom follows the merry misadventure...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6234 rows √ó 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-baab8d3d-229c-40d7-b777-046884657125')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-baab8d3d-229c-40d7-b777-046884657125 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-baab8d3d-229c-40d7-b777-046884657125');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5857bcfd-518c-435a-9367-369b510cad2a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5857bcfd-518c-435a-9367-369b510cad2a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5857bcfd-518c-435a-9367-369b510cad2a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_24dba7e6-3fa7-476b-ba59-8f4366e23df9\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_24dba7e6-3fa7-476b-ba59-8f4366e23df9 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 6234,\n  \"fields\": [\n    {\n      \"column\": \"show_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10942964,\n        \"min\": 247747,\n        \"max\": 81235729,\n        \"num_unique_values\": 6234,\n        \"samples\": [\n          81025317,\n          80184422,\n          80232914\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"TV Show\",\n          \"Movie\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6172,\n        \"samples\": [\n          \"Hulk Vs.\",\n          \"Khan: No. 1 Crime Hunter\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"director\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3301,\n        \"samples\": [\n          \"Jacob LaMendola\",\n          \"Marita Grabiak\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cast\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5469,\n        \"samples\": [\n          \"Mick Rock\",\n          \"Dakore Akande, Ireti Doyle, Nse Ikpe-Etim, Omoni Oboli\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 554,\n        \"samples\": [\n          \"Switzerland\",\n          \"Argentina\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date_added\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1524,\n        \"samples\": [\n          \"February 24, 2016\",\n          \"September 14, 2019\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"release_year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 1925,\n        \"max\": 2020,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          2014,\n          1944\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"TV-G\",\n          \"G\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 201,\n        \"samples\": [\n          \"151 min\",\n          \"79 min\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"listed_in\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 461,\n        \"samples\": [\n          \"Action & Adventure, Independent Movies, Sci-Fi & Fantasy\",\n          \"Comedies, Dramas, International Movies\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6226,\n        \"samples\": [\n          \"Learning that her father has married a woman her own age, Kanaya leaves home, only to get into an accident that lands her in a haunted hospital.\",\n          \"Born with supernatural strength, Bong-soon fights evil and procures justice while getting tangled in a love triangle with her CEO boss and cop crush.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Dealing with Missing Data**"
      ],
      "metadata": {
        "id": "2gEzIJBuShvt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove a column or row with .drop, .dropna or .isnull\n",
        "\n",
        "# drop column\n",
        "# df.drop('director', axis=1, inplace=True) # axis =1 since its a column\n",
        "\n",
        "# drop column\n",
        "null_index_director = df[df['director'].isnull()].index\n",
        "\n",
        "# drop row with null values\n",
        "df.drop(null_index_director, inplace=True, axis=0)"
      ],
      "metadata": {
        "id": "JNtB1t9yQWxQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# verifying the null value in director columns\n",
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "4UUy6lCiUgAA",
        "outputId": "0340f2fe-e978-4bdb-ed1b-e5cfecd1442d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "show_id           0\n",
              "type              0\n",
              "title             0\n",
              "director          0\n",
              "cast            356\n",
              "country         171\n",
              "date_added        0\n",
              "release_year      0\n",
              "rating            6\n",
              "duration          0\n",
              "listed_in         0\n",
              "description       0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>show_id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>type</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>title</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>director</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cast</th>\n",
              "      <td>356</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>country</th>\n",
              "      <td>171</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>date_added</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>release_year</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>rating</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>duration</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>listed_in</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>description</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# using ~ + .isnull()\n",
        "df[~(df['director'].isnull())]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "FsR_8CBFVAU_",
        "outputId": "de979c36-e340-464e-c34c-242f7d0318fc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       show_id     type                                    title  \\\n",
              "0     81145628    Movie  Norm of the North: King Sized Adventure   \n",
              "4     80125979    Movie                             #realityhigh   \n",
              "6     70304989    Movie                                 Automata   \n",
              "7     80164077    Movie       Fabrizio Copano: Solo pienso en mi   \n",
              "9     70304990    Movie                              Good People   \n",
              "...        ...      ...                                      ...   \n",
              "6142  80063224  TV Show            The Great British Baking Show   \n",
              "6158  80164216  TV Show  Miraculous: Tales of Ladybug & Cat Noir   \n",
              "6167  80115328  TV Show                             Sacred Games   \n",
              "6182  80176842  TV Show                         Men on a Mission   \n",
              "6213  80126599  TV Show                         Leyla and Mecnun   \n",
              "\n",
              "                                  director  \\\n",
              "0                 Richard Finn, Tim Maltby   \n",
              "4                         Fernando Lebrija   \n",
              "6                              Gabe Ib√°√±ez   \n",
              "7          Rodrigo Toro, Francisco Schultz   \n",
              "9                        Henrik Ruben Genz   \n",
              "...                                    ...   \n",
              "6142                       Andy Devonshire   \n",
              "6158                         Thomas Astruc   \n",
              "6167  Vikramaditya Motwane, Anurag Kashyap   \n",
              "6182                            Jung-ah Im   \n",
              "6213                             Onur √únl√º   \n",
              "\n",
              "                                                   cast  \\\n",
              "0     Alan Marriott, Andrew Toth, Brian Dobson, Cole...   \n",
              "4     Nesta Cooper, Kate Walsh, John Michael Higgins...   \n",
              "6     Antonio Banderas, Dylan McDermott, Melanie Gri...   \n",
              "7                                       Fabrizio Copano   \n",
              "9     James Franco, Kate Hudson, Tom Wilkinson, Omar...   \n",
              "...                                                 ...   \n",
              "6142  Mel Giedroyc, Sue Perkins, Mary Berry, Paul Ho...   \n",
              "6158  Cristina Vee, Bryce Papenbrook, Keith Silverst...   \n",
              "6167  Saif Ali Khan, Nawazuddin Siddiqui, Radhika Ap...   \n",
              "6182  Ho-dong Kang, Soo-geun Lee, Sang-min Lee, Youn...   \n",
              "6213  Ali Atay, Melis Birkan, Serkan Keskin, Ahmet M...   \n",
              "\n",
              "                                             country         date_added  \\\n",
              "0           United States, India, South Korea, China  September 9, 2019   \n",
              "4                                      United States  September 8, 2017   \n",
              "6             Bulgaria, United States, Spain, Canada  September 8, 2017   \n",
              "7                                              Chile  September 8, 2017   \n",
              "9     United States, United Kingdom, Denmark, Sweden  September 8, 2017   \n",
              "...                                              ...                ...   \n",
              "6142                                  United Kingdom    August 30, 2019   \n",
              "6158                      France, South Korea, Japan     August 2, 2019   \n",
              "6167                            India, United States    August 15, 2019   \n",
              "6182                                     South Korea      April 9, 2019   \n",
              "6213                                          Turkey     April 15, 2017   \n",
              "\n",
              "      release_year rating   duration  \\\n",
              "0             2019  TV-PG     90 min   \n",
              "4             2017  TV-14     99 min   \n",
              "6             2014      R    110 min   \n",
              "7             2017  TV-MA     60 min   \n",
              "9             2014      R     90 min   \n",
              "...            ...    ...        ...   \n",
              "6142          2019  TV-PG  7 Seasons   \n",
              "6158          2018  TV-Y7  4 Seasons   \n",
              "6167          2019  TV-MA  2 Seasons   \n",
              "6182          2019  TV-14  4 Seasons   \n",
              "6213          2014  TV-PG  3 Seasons   \n",
              "\n",
              "                                              listed_in  \\\n",
              "0                    Children & Family Movies, Comedies   \n",
              "4                                              Comedies   \n",
              "6     International Movies, Sci-Fi & Fantasy, Thrillers   \n",
              "7                                       Stand-Up Comedy   \n",
              "9                         Action & Adventure, Thrillers   \n",
              "...                                                 ...   \n",
              "6142                       British TV Shows, Reality TV   \n",
              "6158                    Kids' TV, TV Action & Adventure   \n",
              "6167  Crime TV Shows, International TV Shows, TV Dramas   \n",
              "6182  International TV Shows, Korean TV Shows, Stand...   \n",
              "6213  International TV Shows, Romantic TV Shows, TV ...   \n",
              "\n",
              "                                            description  \n",
              "0     Before planning an awesome wedding for his gra...  \n",
              "4     When nerdy high schooler Dani finally attracts...  \n",
              "6     In a dystopian future, an insurance adjuster f...  \n",
              "7     Fabrizio Copano takes audience participation t...  \n",
              "9     A struggling couple can't believe their luck w...  \n",
              "...                                                 ...  \n",
              "6142  A talented batch of amateur bakers face off in...  \n",
              "6158  When Paris is in peril, Marinette becomes Lady...  \n",
              "6167  A link in their pasts leads an honest cop to a...  \n",
              "6182  Male celebs play make-believe as high schooler...  \n",
              "6213  Destiny brings Mecnun and Leyla together as ne...  \n",
              "\n",
              "[4265 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c2e18fb5-2cc3-429a-a939-65350dc91b64\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>show_id</th>\n",
              "      <th>type</th>\n",
              "      <th>title</th>\n",
              "      <th>director</th>\n",
              "      <th>cast</th>\n",
              "      <th>country</th>\n",
              "      <th>date_added</th>\n",
              "      <th>release_year</th>\n",
              "      <th>rating</th>\n",
              "      <th>duration</th>\n",
              "      <th>listed_in</th>\n",
              "      <th>description</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>81145628</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Norm of the North: King Sized Adventure</td>\n",
              "      <td>Richard Finn, Tim Maltby</td>\n",
              "      <td>Alan Marriott, Andrew Toth, Brian Dobson, Cole...</td>\n",
              "      <td>United States, India, South Korea, China</td>\n",
              "      <td>September 9, 2019</td>\n",
              "      <td>2019</td>\n",
              "      <td>TV-PG</td>\n",
              "      <td>90 min</td>\n",
              "      <td>Children &amp; Family Movies, Comedies</td>\n",
              "      <td>Before planning an awesome wedding for his gra...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>80125979</td>\n",
              "      <td>Movie</td>\n",
              "      <td>#realityhigh</td>\n",
              "      <td>Fernando Lebrija</td>\n",
              "      <td>Nesta Cooper, Kate Walsh, John Michael Higgins...</td>\n",
              "      <td>United States</td>\n",
              "      <td>September 8, 2017</td>\n",
              "      <td>2017</td>\n",
              "      <td>TV-14</td>\n",
              "      <td>99 min</td>\n",
              "      <td>Comedies</td>\n",
              "      <td>When nerdy high schooler Dani finally attracts...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>70304989</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Automata</td>\n",
              "      <td>Gabe Ib√°√±ez</td>\n",
              "      <td>Antonio Banderas, Dylan McDermott, Melanie Gri...</td>\n",
              "      <td>Bulgaria, United States, Spain, Canada</td>\n",
              "      <td>September 8, 2017</td>\n",
              "      <td>2014</td>\n",
              "      <td>R</td>\n",
              "      <td>110 min</td>\n",
              "      <td>International Movies, Sci-Fi &amp; Fantasy, Thrillers</td>\n",
              "      <td>In a dystopian future, an insurance adjuster f...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>80164077</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Fabrizio Copano: Solo pienso en mi</td>\n",
              "      <td>Rodrigo Toro, Francisco Schultz</td>\n",
              "      <td>Fabrizio Copano</td>\n",
              "      <td>Chile</td>\n",
              "      <td>September 8, 2017</td>\n",
              "      <td>2017</td>\n",
              "      <td>TV-MA</td>\n",
              "      <td>60 min</td>\n",
              "      <td>Stand-Up Comedy</td>\n",
              "      <td>Fabrizio Copano takes audience participation t...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>70304990</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Good People</td>\n",
              "      <td>Henrik Ruben Genz</td>\n",
              "      <td>James Franco, Kate Hudson, Tom Wilkinson, Omar...</td>\n",
              "      <td>United States, United Kingdom, Denmark, Sweden</td>\n",
              "      <td>September 8, 2017</td>\n",
              "      <td>2014</td>\n",
              "      <td>R</td>\n",
              "      <td>90 min</td>\n",
              "      <td>Action &amp; Adventure, Thrillers</td>\n",
              "      <td>A struggling couple can't believe their luck w...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6142</th>\n",
              "      <td>80063224</td>\n",
              "      <td>TV Show</td>\n",
              "      <td>The Great British Baking Show</td>\n",
              "      <td>Andy Devonshire</td>\n",
              "      <td>Mel Giedroyc, Sue Perkins, Mary Berry, Paul Ho...</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>August 30, 2019</td>\n",
              "      <td>2019</td>\n",
              "      <td>TV-PG</td>\n",
              "      <td>7 Seasons</td>\n",
              "      <td>British TV Shows, Reality TV</td>\n",
              "      <td>A talented batch of amateur bakers face off in...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6158</th>\n",
              "      <td>80164216</td>\n",
              "      <td>TV Show</td>\n",
              "      <td>Miraculous: Tales of Ladybug &amp; Cat Noir</td>\n",
              "      <td>Thomas Astruc</td>\n",
              "      <td>Cristina Vee, Bryce Papenbrook, Keith Silverst...</td>\n",
              "      <td>France, South Korea, Japan</td>\n",
              "      <td>August 2, 2019</td>\n",
              "      <td>2018</td>\n",
              "      <td>TV-Y7</td>\n",
              "      <td>4 Seasons</td>\n",
              "      <td>Kids' TV, TV Action &amp; Adventure</td>\n",
              "      <td>When Paris is in peril, Marinette becomes Lady...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6167</th>\n",
              "      <td>80115328</td>\n",
              "      <td>TV Show</td>\n",
              "      <td>Sacred Games</td>\n",
              "      <td>Vikramaditya Motwane, Anurag Kashyap</td>\n",
              "      <td>Saif Ali Khan, Nawazuddin Siddiqui, Radhika Ap...</td>\n",
              "      <td>India, United States</td>\n",
              "      <td>August 15, 2019</td>\n",
              "      <td>2019</td>\n",
              "      <td>TV-MA</td>\n",
              "      <td>2 Seasons</td>\n",
              "      <td>Crime TV Shows, International TV Shows, TV Dramas</td>\n",
              "      <td>A link in their pasts leads an honest cop to a...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6182</th>\n",
              "      <td>80176842</td>\n",
              "      <td>TV Show</td>\n",
              "      <td>Men on a Mission</td>\n",
              "      <td>Jung-ah Im</td>\n",
              "      <td>Ho-dong Kang, Soo-geun Lee, Sang-min Lee, Youn...</td>\n",
              "      <td>South Korea</td>\n",
              "      <td>April 9, 2019</td>\n",
              "      <td>2019</td>\n",
              "      <td>TV-14</td>\n",
              "      <td>4 Seasons</td>\n",
              "      <td>International TV Shows, Korean TV Shows, Stand...</td>\n",
              "      <td>Male celebs play make-believe as high schooler...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6213</th>\n",
              "      <td>80126599</td>\n",
              "      <td>TV Show</td>\n",
              "      <td>Leyla and Mecnun</td>\n",
              "      <td>Onur √únl√º</td>\n",
              "      <td>Ali Atay, Melis Birkan, Serkan Keskin, Ahmet M...</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>April 15, 2017</td>\n",
              "      <td>2014</td>\n",
              "      <td>TV-PG</td>\n",
              "      <td>3 Seasons</td>\n",
              "      <td>International TV Shows, Romantic TV Shows, TV ...</td>\n",
              "      <td>Destiny brings Mecnun and Leyla together as ne...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4265 rows √ó 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c2e18fb5-2cc3-429a-a939-65350dc91b64')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c2e18fb5-2cc3-429a-a939-65350dc91b64 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c2e18fb5-2cc3-429a-a939-65350dc91b64');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-aa2c66a8-4ab2-4c92-828a-8fa7c5c16715\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-aa2c66a8-4ab2-4c92-828a-8fa7c5c16715')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-aa2c66a8-4ab2-4c92-828a-8fa7c5c16715 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df[~(df['director']\",\n  \"rows\": 4265,\n  \"fields\": [\n    {\n      \"column\": \"show_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12874400,\n        \"min\": 247747,\n        \"max\": 81235729,\n        \"num_unique_values\": 4265,\n        \"samples\": [\n          80145085,\n          70216819,\n          81002592\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"TV Show\",\n          \"Movie\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4239,\n        \"samples\": [\n          \"Don\",\n          \"Christmas Crush\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"director\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3301,\n        \"samples\": [\n          \"Jacob LaMendola\",\n          \"Marita Grabiak\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cast\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3784,\n        \"samples\": [\n          \"Freddie Highmore, Mary-Louise Parker, Sarah Bolger, Joan Plowright, David Strathairn, Nick Nolte, Seth Rogen, Andrew McCarthy, Martin Short\",\n          \"Aamir Khan, Saif Ali Khan, Akshaye Khanna, Preity Zinta, Sonali Kulkarni, Dimple Kapadia, Ayub Khan, Rajat Kapoor, Suhasini Mulay, Ahmed Khan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 482,\n        \"samples\": [\n          \"Ireland, United Kingdom, Greece, France, Netherlands\",\n          \"China, Germany, India, United States\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date_added\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1082,\n        \"samples\": [\n          \"September 18, 2018\",\n          \"June 30, 2019\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"release_year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 1942,\n        \"max\": 2020,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          1991,\n          2019\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"TV-G\",\n          \"UR\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 191,\n        \"samples\": [\n          \"3 min\",\n          \"52 min\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"listed_in\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 307,\n        \"samples\": [\n          \"Anime Series, International TV Shows\",\n          \"Thrillers\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4257,\n        \"samples\": [\n          \"After years of slouching through life, 6-foot-1 teen Jodi resolves to conquer her insecurities and gets caught up in a high school love triangle.\",\n          \"In this urban romantic comedy set in Chicago, the ups and downs of courtship play out between a young black poet and a pretty shutterbug.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# using ~ + .isnull()\n",
        "df[~(df['director'].isnull())].isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "dXECnP4_WThK",
        "outputId": "9fe70d14-c4ab-466f-c5a3-9e4507dd16a4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "show_id           0\n",
              "type              0\n",
              "title             0\n",
              "director          0\n",
              "cast            356\n",
              "country         171\n",
              "date_added        0\n",
              "release_year      0\n",
              "rating            6\n",
              "duration          0\n",
              "listed_in         0\n",
              "description       0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>show_id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>type</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>title</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>director</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cast</th>\n",
              "      <td>356</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>country</th>\n",
              "      <td>171</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>date_added</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>release_year</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>rating</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>duration</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>listed_in</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>description</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# droping the na\n",
        "df.dropna(subset=['director'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "o1xzV3TDWVg4",
        "outputId": "b5c332bc-e8a3-4698-919c-16af9cab6e2a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       show_id     type                                    title  \\\n",
              "0     81145628    Movie  Norm of the North: King Sized Adventure   \n",
              "4     80125979    Movie                             #realityhigh   \n",
              "6     70304989    Movie                                 Automata   \n",
              "7     80164077    Movie       Fabrizio Copano: Solo pienso en mi   \n",
              "9     70304990    Movie                              Good People   \n",
              "...        ...      ...                                      ...   \n",
              "6142  80063224  TV Show            The Great British Baking Show   \n",
              "6158  80164216  TV Show  Miraculous: Tales of Ladybug & Cat Noir   \n",
              "6167  80115328  TV Show                             Sacred Games   \n",
              "6182  80176842  TV Show                         Men on a Mission   \n",
              "6213  80126599  TV Show                         Leyla and Mecnun   \n",
              "\n",
              "                                  director  \\\n",
              "0                 Richard Finn, Tim Maltby   \n",
              "4                         Fernando Lebrija   \n",
              "6                              Gabe Ib√°√±ez   \n",
              "7          Rodrigo Toro, Francisco Schultz   \n",
              "9                        Henrik Ruben Genz   \n",
              "...                                    ...   \n",
              "6142                       Andy Devonshire   \n",
              "6158                         Thomas Astruc   \n",
              "6167  Vikramaditya Motwane, Anurag Kashyap   \n",
              "6182                            Jung-ah Im   \n",
              "6213                             Onur √únl√º   \n",
              "\n",
              "                                                   cast  \\\n",
              "0     Alan Marriott, Andrew Toth, Brian Dobson, Cole...   \n",
              "4     Nesta Cooper, Kate Walsh, John Michael Higgins...   \n",
              "6     Antonio Banderas, Dylan McDermott, Melanie Gri...   \n",
              "7                                       Fabrizio Copano   \n",
              "9     James Franco, Kate Hudson, Tom Wilkinson, Omar...   \n",
              "...                                                 ...   \n",
              "6142  Mel Giedroyc, Sue Perkins, Mary Berry, Paul Ho...   \n",
              "6158  Cristina Vee, Bryce Papenbrook, Keith Silverst...   \n",
              "6167  Saif Ali Khan, Nawazuddin Siddiqui, Radhika Ap...   \n",
              "6182  Ho-dong Kang, Soo-geun Lee, Sang-min Lee, Youn...   \n",
              "6213  Ali Atay, Melis Birkan, Serkan Keskin, Ahmet M...   \n",
              "\n",
              "                                             country         date_added  \\\n",
              "0           United States, India, South Korea, China  September 9, 2019   \n",
              "4                                      United States  September 8, 2017   \n",
              "6             Bulgaria, United States, Spain, Canada  September 8, 2017   \n",
              "7                                              Chile  September 8, 2017   \n",
              "9     United States, United Kingdom, Denmark, Sweden  September 8, 2017   \n",
              "...                                              ...                ...   \n",
              "6142                                  United Kingdom    August 30, 2019   \n",
              "6158                      France, South Korea, Japan     August 2, 2019   \n",
              "6167                            India, United States    August 15, 2019   \n",
              "6182                                     South Korea      April 9, 2019   \n",
              "6213                                          Turkey     April 15, 2017   \n",
              "\n",
              "      release_year rating   duration  \\\n",
              "0             2019  TV-PG     90 min   \n",
              "4             2017  TV-14     99 min   \n",
              "6             2014      R    110 min   \n",
              "7             2017  TV-MA     60 min   \n",
              "9             2014      R     90 min   \n",
              "...            ...    ...        ...   \n",
              "6142          2019  TV-PG  7 Seasons   \n",
              "6158          2018  TV-Y7  4 Seasons   \n",
              "6167          2019  TV-MA  2 Seasons   \n",
              "6182          2019  TV-14  4 Seasons   \n",
              "6213          2014  TV-PG  3 Seasons   \n",
              "\n",
              "                                              listed_in  \\\n",
              "0                    Children & Family Movies, Comedies   \n",
              "4                                              Comedies   \n",
              "6     International Movies, Sci-Fi & Fantasy, Thrillers   \n",
              "7                                       Stand-Up Comedy   \n",
              "9                         Action & Adventure, Thrillers   \n",
              "...                                                 ...   \n",
              "6142                       British TV Shows, Reality TV   \n",
              "6158                    Kids' TV, TV Action & Adventure   \n",
              "6167  Crime TV Shows, International TV Shows, TV Dramas   \n",
              "6182  International TV Shows, Korean TV Shows, Stand...   \n",
              "6213  International TV Shows, Romantic TV Shows, TV ...   \n",
              "\n",
              "                                            description  \n",
              "0     Before planning an awesome wedding for his gra...  \n",
              "4     When nerdy high schooler Dani finally attracts...  \n",
              "6     In a dystopian future, an insurance adjuster f...  \n",
              "7     Fabrizio Copano takes audience participation t...  \n",
              "9     A struggling couple can't believe their luck w...  \n",
              "...                                                 ...  \n",
              "6142  A talented batch of amateur bakers face off in...  \n",
              "6158  When Paris is in peril, Marinette becomes Lady...  \n",
              "6167  A link in their pasts leads an honest cop to a...  \n",
              "6182  Male celebs play make-believe as high schooler...  \n",
              "6213  Destiny brings Mecnun and Leyla together as ne...  \n",
              "\n",
              "[4265 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-284a4903-e12d-41bf-ae4a-aa92b1ae3ca1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>show_id</th>\n",
              "      <th>type</th>\n",
              "      <th>title</th>\n",
              "      <th>director</th>\n",
              "      <th>cast</th>\n",
              "      <th>country</th>\n",
              "      <th>date_added</th>\n",
              "      <th>release_year</th>\n",
              "      <th>rating</th>\n",
              "      <th>duration</th>\n",
              "      <th>listed_in</th>\n",
              "      <th>description</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>81145628</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Norm of the North: King Sized Adventure</td>\n",
              "      <td>Richard Finn, Tim Maltby</td>\n",
              "      <td>Alan Marriott, Andrew Toth, Brian Dobson, Cole...</td>\n",
              "      <td>United States, India, South Korea, China</td>\n",
              "      <td>September 9, 2019</td>\n",
              "      <td>2019</td>\n",
              "      <td>TV-PG</td>\n",
              "      <td>90 min</td>\n",
              "      <td>Children &amp; Family Movies, Comedies</td>\n",
              "      <td>Before planning an awesome wedding for his gra...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>80125979</td>\n",
              "      <td>Movie</td>\n",
              "      <td>#realityhigh</td>\n",
              "      <td>Fernando Lebrija</td>\n",
              "      <td>Nesta Cooper, Kate Walsh, John Michael Higgins...</td>\n",
              "      <td>United States</td>\n",
              "      <td>September 8, 2017</td>\n",
              "      <td>2017</td>\n",
              "      <td>TV-14</td>\n",
              "      <td>99 min</td>\n",
              "      <td>Comedies</td>\n",
              "      <td>When nerdy high schooler Dani finally attracts...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>70304989</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Automata</td>\n",
              "      <td>Gabe Ib√°√±ez</td>\n",
              "      <td>Antonio Banderas, Dylan McDermott, Melanie Gri...</td>\n",
              "      <td>Bulgaria, United States, Spain, Canada</td>\n",
              "      <td>September 8, 2017</td>\n",
              "      <td>2014</td>\n",
              "      <td>R</td>\n",
              "      <td>110 min</td>\n",
              "      <td>International Movies, Sci-Fi &amp; Fantasy, Thrillers</td>\n",
              "      <td>In a dystopian future, an insurance adjuster f...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>80164077</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Fabrizio Copano: Solo pienso en mi</td>\n",
              "      <td>Rodrigo Toro, Francisco Schultz</td>\n",
              "      <td>Fabrizio Copano</td>\n",
              "      <td>Chile</td>\n",
              "      <td>September 8, 2017</td>\n",
              "      <td>2017</td>\n",
              "      <td>TV-MA</td>\n",
              "      <td>60 min</td>\n",
              "      <td>Stand-Up Comedy</td>\n",
              "      <td>Fabrizio Copano takes audience participation t...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>70304990</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Good People</td>\n",
              "      <td>Henrik Ruben Genz</td>\n",
              "      <td>James Franco, Kate Hudson, Tom Wilkinson, Omar...</td>\n",
              "      <td>United States, United Kingdom, Denmark, Sweden</td>\n",
              "      <td>September 8, 2017</td>\n",
              "      <td>2014</td>\n",
              "      <td>R</td>\n",
              "      <td>90 min</td>\n",
              "      <td>Action &amp; Adventure, Thrillers</td>\n",
              "      <td>A struggling couple can't believe their luck w...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6142</th>\n",
              "      <td>80063224</td>\n",
              "      <td>TV Show</td>\n",
              "      <td>The Great British Baking Show</td>\n",
              "      <td>Andy Devonshire</td>\n",
              "      <td>Mel Giedroyc, Sue Perkins, Mary Berry, Paul Ho...</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>August 30, 2019</td>\n",
              "      <td>2019</td>\n",
              "      <td>TV-PG</td>\n",
              "      <td>7 Seasons</td>\n",
              "      <td>British TV Shows, Reality TV</td>\n",
              "      <td>A talented batch of amateur bakers face off in...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6158</th>\n",
              "      <td>80164216</td>\n",
              "      <td>TV Show</td>\n",
              "      <td>Miraculous: Tales of Ladybug &amp; Cat Noir</td>\n",
              "      <td>Thomas Astruc</td>\n",
              "      <td>Cristina Vee, Bryce Papenbrook, Keith Silverst...</td>\n",
              "      <td>France, South Korea, Japan</td>\n",
              "      <td>August 2, 2019</td>\n",
              "      <td>2018</td>\n",
              "      <td>TV-Y7</td>\n",
              "      <td>4 Seasons</td>\n",
              "      <td>Kids' TV, TV Action &amp; Adventure</td>\n",
              "      <td>When Paris is in peril, Marinette becomes Lady...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6167</th>\n",
              "      <td>80115328</td>\n",
              "      <td>TV Show</td>\n",
              "      <td>Sacred Games</td>\n",
              "      <td>Vikramaditya Motwane, Anurag Kashyap</td>\n",
              "      <td>Saif Ali Khan, Nawazuddin Siddiqui, Radhika Ap...</td>\n",
              "      <td>India, United States</td>\n",
              "      <td>August 15, 2019</td>\n",
              "      <td>2019</td>\n",
              "      <td>TV-MA</td>\n",
              "      <td>2 Seasons</td>\n",
              "      <td>Crime TV Shows, International TV Shows, TV Dramas</td>\n",
              "      <td>A link in their pasts leads an honest cop to a...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6182</th>\n",
              "      <td>80176842</td>\n",
              "      <td>TV Show</td>\n",
              "      <td>Men on a Mission</td>\n",
              "      <td>Jung-ah Im</td>\n",
              "      <td>Ho-dong Kang, Soo-geun Lee, Sang-min Lee, Youn...</td>\n",
              "      <td>South Korea</td>\n",
              "      <td>April 9, 2019</td>\n",
              "      <td>2019</td>\n",
              "      <td>TV-14</td>\n",
              "      <td>4 Seasons</td>\n",
              "      <td>International TV Shows, Korean TV Shows, Stand...</td>\n",
              "      <td>Male celebs play make-believe as high schooler...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6213</th>\n",
              "      <td>80126599</td>\n",
              "      <td>TV Show</td>\n",
              "      <td>Leyla and Mecnun</td>\n",
              "      <td>Onur √únl√º</td>\n",
              "      <td>Ali Atay, Melis Birkan, Serkan Keskin, Ahmet M...</td>\n",
              "      <td>Turkey</td>\n",
              "      <td>April 15, 2017</td>\n",
              "      <td>2014</td>\n",
              "      <td>TV-PG</td>\n",
              "      <td>3 Seasons</td>\n",
              "      <td>International TV Shows, Romantic TV Shows, TV ...</td>\n",
              "      <td>Destiny brings Mecnun and Leyla together as ne...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4265 rows √ó 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-284a4903-e12d-41bf-ae4a-aa92b1ae3ca1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-284a4903-e12d-41bf-ae4a-aa92b1ae3ca1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-284a4903-e12d-41bf-ae4a-aa92b1ae3ca1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-654194cb-d0c8-4384-9380-d611231ce3e6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-654194cb-d0c8-4384-9380-d611231ce3e6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-654194cb-d0c8-4384-9380-d611231ce3e6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 4265,\n  \"fields\": [\n    {\n      \"column\": \"show_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12874400,\n        \"min\": 247747,\n        \"max\": 81235729,\n        \"num_unique_values\": 4265,\n        \"samples\": [\n          80145085,\n          70216819,\n          81002592\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"TV Show\",\n          \"Movie\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4239,\n        \"samples\": [\n          \"Don\",\n          \"Christmas Crush\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"director\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3301,\n        \"samples\": [\n          \"Jacob LaMendola\",\n          \"Marita Grabiak\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cast\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3784,\n        \"samples\": [\n          \"Freddie Highmore, Mary-Louise Parker, Sarah Bolger, Joan Plowright, David Strathairn, Nick Nolte, Seth Rogen, Andrew McCarthy, Martin Short\",\n          \"Aamir Khan, Saif Ali Khan, Akshaye Khanna, Preity Zinta, Sonali Kulkarni, Dimple Kapadia, Ayub Khan, Rajat Kapoor, Suhasini Mulay, Ahmed Khan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 482,\n        \"samples\": [\n          \"Ireland, United Kingdom, Greece, France, Netherlands\",\n          \"China, Germany, India, United States\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date_added\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1082,\n        \"samples\": [\n          \"September 18, 2018\",\n          \"June 30, 2019\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"release_year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 1942,\n        \"max\": 2020,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          1991,\n          2019\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"TV-G\",\n          \"UR\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 191,\n        \"samples\": [\n          \"3 min\",\n          \"52 min\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"listed_in\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 307,\n        \"samples\": [\n          \"Anime Series, International TV Shows\",\n          \"Thrillers\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4257,\n        \"samples\": [\n          \"After years of slouching through life, 6-foot-1 teen Jodi resolves to conquer her insecurities and gets caught up in a high school love triangle.\",\n          \"In this urban romantic comedy set in Chicago, the ups and downs of courtship play out between a young black poet and a pretty shutterbug.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# droping the na\n",
        "df.dropna(subset=['director']).isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "e5Q4EFphWr35",
        "outputId": "070e0608-1d8c-4d5b-d2e4-ece45e8bd37a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "show_id           0\n",
              "type              0\n",
              "title             0\n",
              "director          0\n",
              "cast              0\n",
              "country         171\n",
              "date_added        0\n",
              "release_year      0\n",
              "rating            0\n",
              "duration          0\n",
              "listed_in         0\n",
              "description       0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>show_id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>type</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>title</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>director</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cast</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>country</th>\n",
              "      <td>171</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>date_added</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>release_year</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>rating</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>duration</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>listed_in</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>description</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Using fillna to replace NaN by mean, median(numeric data) or mode\n",
        "mode = ''.join(df['rating'].mode())\n",
        "df['rating'].fillna(mode, inplace=True)\n",
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Qt2PolzRYeTG",
        "outputId": "fff06838-7cf1-4b61-9018-befa65fa9382"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 4265 entries, 0 to 6213\n",
            "Data columns (total 12 columns):\n",
            " #   Column        Non-Null Count  Dtype \n",
            "---  ------        --------------  ----- \n",
            " 0   show_id       4265 non-null   int64 \n",
            " 1   type          4265 non-null   object\n",
            " 2   title         4265 non-null   object\n",
            " 3   director      4265 non-null   object\n",
            " 4   cast          4265 non-null   object\n",
            " 5   country       4094 non-null   object\n",
            " 6   date_added    4265 non-null   object\n",
            " 7   release_year  4265 non-null   int64 \n",
            " 8   rating        4265 non-null   object\n",
            " 9   duration      4265 non-null   object\n",
            " 10  listed_in     4265 non-null   object\n",
            " 11  description   4265 non-null   object\n",
            "dtypes: int64(2), object(10)\n",
            "memory usage: 433.2+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Replacing it by an arbitrary number with .fillna()\n",
        "# df['cast'].fillna(0, inplace=True)\n",
        "df.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "5Wwk1JcZauBa",
        "outputId": "5e7cb34b-3523-4c81-ab47-0171bf185897"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "show_id           0\n",
              "type              0\n",
              "title             0\n",
              "director          0\n",
              "cast              0\n",
              "country         171\n",
              "date_added        0\n",
              "release_year      0\n",
              "rating            0\n",
              "duration          0\n",
              "listed_in         0\n",
              "description       0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>show_id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>type</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>title</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>director</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cast</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>country</th>\n",
              "      <td>171</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>date_added</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>release_year</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>rating</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>duration</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>listed_in</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>description</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# replacing with backward\n",
        "df['country'].fillna(method='bfill', inplace=True)\n",
        "\n",
        "# replacing with forward fill\n",
        "df['cast'].fillna(method='ffill', inplace=True)\n",
        "\n",
        "df.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "oGew1ocJcEcZ",
        "outputId": "75ebadbd-f8eb-4c3d-9cad-4a3e936eb31f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "show_id         0\n",
              "type            0\n",
              "title           0\n",
              "director        0\n",
              "cast            0\n",
              "country         0\n",
              "date_added      0\n",
              "release_year    0\n",
              "rating          0\n",
              "duration        0\n",
              "listed_in       0\n",
              "description     0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>show_id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>type</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>title</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>director</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cast</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>country</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>date_added</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>release_year</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>rating</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>duration</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>listed_in</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>description</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Extracting data from \"duration\" column with split() and extract method\n",
        "df_movie = df[df['type']=='Movie']\n",
        "\n",
        "df_movie['duration'].str.split(expand=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "lraa09oldnTj",
        "outputId": "17bea104-4b61-4d5c-bc47-0532f802c704"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        0    1\n",
              "0      90  min\n",
              "4      99  min\n",
              "6     110  min\n",
              "7      60  min\n",
              "9      90  min\n",
              "...   ...  ...\n",
              "5575  106  min\n",
              "5577   70  min\n",
              "5578  102  min\n",
              "5579   88  min\n",
              "5580  109  min\n",
              "\n",
              "[4137 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ec430126-1392-45d2-8d54-92a739c138cd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>90</td>\n",
              "      <td>min</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>99</td>\n",
              "      <td>min</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>110</td>\n",
              "      <td>min</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>60</td>\n",
              "      <td>min</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>90</td>\n",
              "      <td>min</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5575</th>\n",
              "      <td>106</td>\n",
              "      <td>min</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5577</th>\n",
              "      <td>70</td>\n",
              "      <td>min</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5578</th>\n",
              "      <td>102</td>\n",
              "      <td>min</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5579</th>\n",
              "      <td>88</td>\n",
              "      <td>min</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5580</th>\n",
              "      <td>109</td>\n",
              "      <td>min</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4137 rows √ó 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ec430126-1392-45d2-8d54-92a739c138cd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ec430126-1392-45d2-8d54-92a739c138cd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ec430126-1392-45d2-8d54-92a739c138cd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8795fed9-5a30-41bb-b3f1-1ec8459a357a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8795fed9-5a30-41bb-b3f1-1ec8459a357a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8795fed9-5a30-41bb-b3f1-1ec8459a357a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_movie['duration']\",\n  \"rows\": 4137,\n  \"fields\": [\n    {\n      \"column\": 0,\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 181,\n        \"samples\": [\n          \"114\",\n          \"72\",\n          \"15\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 1,\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"min\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_movie['minute']=df_movie['duration'].str.split(expand=True)[0].astype(int)\n",
        "df_movie['minute'].dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qgqkBVdTf3Ib",
        "outputId": "027de95d-ea51-4cb5-ca98-9317c30a762d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dtype('int64')"
            ]
          },
          "metadata": {},
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_movie.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yvDJNO-ChcoY",
        "outputId": "21269608-4c39-47ab-f4cc-8cf365093f77"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['show_id', 'type', 'title', 'director', 'cast', 'country', 'date_added',\n",
              "       'release_year', 'rating', 'duration', 'listed_in', 'description',\n",
              "       'minute'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_movie['date_added']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "8_ReEizOhpR9",
        "outputId": "8d6b3f7a-5d1e-48bf-b0fa-aca2571bb21d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       September 9, 2019\n",
              "4       September 8, 2017\n",
              "6       September 8, 2017\n",
              "7       September 8, 2017\n",
              "9       September 8, 2017\n",
              "              ...        \n",
              "5575        April 1, 2017\n",
              "5577        April 1, 2016\n",
              "5578        April 1, 2016\n",
              "5579        April 1, 2016\n",
              "5580        April 1, 2016\n",
              "Name: date_added, Length: 4137, dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date_added</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>September 9, 2019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>September 8, 2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>September 8, 2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>September 8, 2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>September 8, 2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5575</th>\n",
              "      <td>April 1, 2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5577</th>\n",
              "      <td>April 1, 2016</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5578</th>\n",
              "      <td>April 1, 2016</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5579</th>\n",
              "      <td>April 1, 2016</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5580</th>\n",
              "      <td>April 1, 2016</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4137 rows √ó 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_movie['date_added'].str.split(',', expand=True)\n",
        "#df_movie['date_added'].str.extract('(\\d{4})')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "7rdW8HcSiC2Y",
        "outputId": "b75f096d-6f33-4237-8aa4-ba6b20d5fae6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                0      1\n",
              "0     September 9   2019\n",
              "4     September 8   2017\n",
              "6     September 8   2017\n",
              "7     September 8   2017\n",
              "9     September 8   2017\n",
              "...           ...    ...\n",
              "5575      April 1   2017\n",
              "5577      April 1   2016\n",
              "5578      April 1   2016\n",
              "5579      April 1   2016\n",
              "5580      April 1   2016\n",
              "\n",
              "[4137 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-448999bb-e1fd-4bb1-a644-c0818a7edb04\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>September 9</td>\n",
              "      <td>2019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>September 8</td>\n",
              "      <td>2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>September 8</td>\n",
              "      <td>2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>September 8</td>\n",
              "      <td>2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>September 8</td>\n",
              "      <td>2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5575</th>\n",
              "      <td>April 1</td>\n",
              "      <td>2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5577</th>\n",
              "      <td>April 1</td>\n",
              "      <td>2016</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5578</th>\n",
              "      <td>April 1</td>\n",
              "      <td>2016</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5579</th>\n",
              "      <td>April 1</td>\n",
              "      <td>2016</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5580</th>\n",
              "      <td>April 1</td>\n",
              "      <td>2016</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4137 rows √ó 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-448999bb-e1fd-4bb1-a644-c0818a7edb04')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-448999bb-e1fd-4bb1-a644-c0818a7edb04 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-448999bb-e1fd-4bb1-a644-c0818a7edb04');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e57db8b0-bc99-4660-8ee8-7e285d570dbf\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e57db8b0-bc99-4660-8ee8-7e285d570dbf')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e57db8b0-bc99-4660-8ee8-7e285d570dbf button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"#df_movie['date_added']\",\n  \"rows\": 4137,\n  \"fields\": [\n    {\n      \"column\": 0,\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 362,\n        \"samples\": [\n          \"June 26\",\n          \"October 6\",\n          \"September 22\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 1,\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \" 2020\",\n          \" 2012\",\n          \" 2019\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 104
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_movie['day_published']=df_movie['date_added'].str.split(',', expand=True)[0]\n",
        "df_movie['year_published']=df_movie['date_added'].str.split(',', expand=True)[1]"
      ],
      "metadata": {
        "id": "m1zyNq-ompce"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_movie.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L9d21iNqoQ-O",
        "outputId": "f6cf8d4b-a861-4a4f-84bd-d99bf4a8066a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['show_id', 'type', 'title', 'director', 'cast', 'country', 'date_added',\n",
              "       'release_year', 'rating', 'duration', 'listed_in', 'description',\n",
              "       'minute', 'day_published', 'year_published'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 120
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_movie.drop('date_added', axis=1, inplace=True)"
      ],
      "metadata": {
        "id": "OQBNkboaoXJ7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_movie.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xIjxdRv8oiTf",
        "outputId": "06b1a432-c586-4a46-beef-661c6070c334"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['show_id', 'type', 'title', 'director', 'cast', 'country',\n",
              "       'release_year', 'rating', 'duration', 'listed_in', 'description',\n",
              "       'minute', 'day_published', 'year_published'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 122
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Detect and Remove  outlier**"
      ],
      "metadata": {
        "id": "6K2HOs2jlniQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_movie.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "FKAHG2XZlvn-",
        "outputId": "90a26fa8-4b21-4f70-8e6f-69a436eb584f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            show_id  release_year       minute\n",
              "count  4.137000e+03   4137.000000  4137.000000\n",
              "mean   7.549281e+07   2012.268310   100.060430\n",
              "std    1.304370e+07      9.810218    27.159101\n",
              "min    2.477470e+05   1942.000000     3.000000\n",
              "25%    7.030128e+07   2011.000000    86.000000\n",
              "50%    8.015708e+07   2016.000000    98.000000\n",
              "75%    8.099034e+07   2017.000000   115.000000\n",
              "max    8.123573e+07   2020.000000   228.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7dce7792-d85d-44a4-8dcc-972be860beb2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>show_id</th>\n",
              "      <th>release_year</th>\n",
              "      <th>minute</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>4.137000e+03</td>\n",
              "      <td>4137.000000</td>\n",
              "      <td>4137.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>7.549281e+07</td>\n",
              "      <td>2012.268310</td>\n",
              "      <td>100.060430</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.304370e+07</td>\n",
              "      <td>9.810218</td>\n",
              "      <td>27.159101</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>2.477470e+05</td>\n",
              "      <td>1942.000000</td>\n",
              "      <td>3.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>7.030128e+07</td>\n",
              "      <td>2011.000000</td>\n",
              "      <td>86.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>8.015708e+07</td>\n",
              "      <td>2016.000000</td>\n",
              "      <td>98.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>8.099034e+07</td>\n",
              "      <td>2017.000000</td>\n",
              "      <td>115.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>8.123573e+07</td>\n",
              "      <td>2020.000000</td>\n",
              "      <td>228.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7dce7792-d85d-44a4-8dcc-972be860beb2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7dce7792-d85d-44a4-8dcc-972be860beb2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7dce7792-d85d-44a4-8dcc-972be860beb2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3222810d-1d9b-4e15-9a64-4b7f625a7f22\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3222810d-1d9b-4e15-9a64-4b7f625a7f22')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3222810d-1d9b-4e15-9a64-4b7f625a7f22 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_movie\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"show_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38262097.37130407,\n        \"min\": 4137.0,\n        \"max\": 81235729.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          75492814.80154702,\n          80157083.0,\n          4137.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"release_year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1103.8114820910057,\n        \"min\": 9.810217696354805,\n        \"max\": 4137.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2012.2683103698332,\n          2016.0,\n          4137.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"minute\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1431.017075495378,\n        \"min\": 3.0,\n        \"max\": 4137.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          100.06043026347595,\n          98.0,\n          4137.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 123
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_movie.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vCbkxC6el6QS",
        "outputId": "e41f52ba-fffc-4289-97d9-f8b4e1212dd6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 4137 entries, 0 to 5580\n",
            "Data columns (total 14 columns):\n",
            " #   Column          Non-Null Count  Dtype \n",
            "---  ------          --------------  ----- \n",
            " 0   show_id         4137 non-null   int64 \n",
            " 1   type            4137 non-null   object\n",
            " 2   title           4137 non-null   object\n",
            " 3   director        4137 non-null   object\n",
            " 4   cast            4137 non-null   object\n",
            " 5   country         4137 non-null   object\n",
            " 6   release_year    4137 non-null   int64 \n",
            " 7   rating          4137 non-null   object\n",
            " 8   duration        4137 non-null   object\n",
            " 9   listed_in       4137 non-null   object\n",
            " 10  description     4137 non-null   object\n",
            " 11  minute          4137 non-null   int64 \n",
            " 12  day_published   4137 non-null   object\n",
            " 13  year_published  4137 non-null   object\n",
            "dtypes: int64(3), object(11)\n",
            "memory usage: 613.8+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.distplot(df_movie['minute'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 471
        },
        "id": "2V1IH8rnmH-l",
        "outputId": "53b0ab35-1645-4b46-c204-66857a91ed74"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='minute', ylabel='Density'>"
            ]
          },
          "metadata": {},
          "execution_count": 102
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkoAAAG1CAYAAAAGD9vIAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAABW4UlEQVR4nO3deXxTdb4//tdJ2iTd0r1NW1paoAhIoayliCDSyyIuFWYG0BHkOuo4gkLHDX8KLnO/1ZnBi45eGb13REcQBodBRUWxKIxSylL2TSh0oW26t2nTNs1yfn+kjY1toEvSk7Sv5+ORB3DyOSfvnEdJX/mcz/l8BFEURRARERFRBzKpCyAiIiJyVwxKRERERA4wKBERERE5wKBERERE5ACDEhEREZEDDEpEREREDjAoERERETnAoERERETkAIMSERERkQMMSkREREQOuEVQeuuttxAfHw+VSoWUlBQcOnTomu23b9+OESNGQKVSISkpCV988YXtOaPRiKeffhpJSUnw8/NDdHQ0li5dipKSErtjxMfHQxAEu8crr7zikvdHREREnknyoLRt2zZkZGRg3bp1yM3NxdixYzFnzhyUl5d32v7AgQNYsmQJHnjgARw7dgzp6elIT0/H6dOnAQCNjY3Izc3F888/j9zcXOzYsQMXLlzAnXfe2eFYL730EkpLS22PlStXuvS9EhERkWcRpF4UNyUlBZMmTcKbb74JALBYLIiNjcXKlSvxzDPPdGi/aNEi6PV67Nq1y7ZtypQpSE5OxsaNGzt9jcOHD2Py5MkoKChAXFwcAGuP0qpVq7Bq1aoe1W2xWFBSUoKAgAAIgtCjYxAREVHfEkUR9fX1iI6Ohkx2/f4irz6oyaGWlhYcPXoUa9assW2TyWRIS0tDdnZ2p/tkZ2cjIyPDbtucOXOwc+dOh69TV1cHQRAQFBRkt/2VV17Byy+/jLi4ONxzzz1YvXo1vLw6PyUGgwEGg8H27+LiYowaNeo675CIiIjcUVFREQYNGnTddpIGpcrKSpjNZkRGRtptj4yMxPnz5zvdR6vVdtpeq9V22r65uRlPP/00lixZArVabdv+2GOPYfz48QgJCcGBAwewZs0alJaW4rXXXuv0OJmZmXjxxRc7bC8qKrI7LhEREbkvnU6H2NhYBAQEdKm9pEHJ1YxGI371q19BFEW8/fbbds+175UaM2YMFAoFHn74YWRmZkKpVHY41po1a+z2aTvRarWaQYmIiMjDdHXYjKRBKSwsDHK5HGVlZXbby8rKoNFoOt1Ho9F0qX1bSCooKMDevXuvG2ZSUlJgMpmQn5+PG264ocPzSqWy0wBFRERE/Zekd70pFApMmDABWVlZtm0WiwVZWVlITU3tdJ/U1FS79gCwZ88eu/ZtIenixYv45ptvEBoaet1ajh8/DplMhoiIiB6+GyIiIupvJL/0lpGRgWXLlmHixImYPHkyNmzYAL1ej+XLlwMAli5dipiYGGRmZgIAHn/8ccyYMQPr16/H/PnzsXXrVhw5cgTvvPMOAGtI+sUvfoHc3Fzs2rULZrPZNn4pJCQECoUC2dnZyMnJwcyZMxEQEIDs7GysXr0av/71rxEcHCzNiSAiIiK3I3lQWrRoESoqKrB27VpotVokJydj9+7dtgHbhYWFdrfvTZ06FVu2bMFzzz2HZ599FomJidi5cydGjx4NwHo32qeffgoASE5Otnutb7/9FrfccguUSiW2bt2KF154AQaDAQkJCVi9enWHu+mIiIhoYJN8HiVPpdPpEBgYiLq6Og7mJiIi8hDd/f0t+czcRERERO6KQYmIiIjIAQYlIiIiIgcYlIiIiIgcYFAiIiIicoBBiYiIiMgBBiUiIiIiBxiUiIiIiBxgUCIiIiJygEGJiIiIyAHJ13ojooFpS07hNZ+/JyWujyohInKMPUpEREREDjAoERERETnAoERERETkAIMSERERkQMMSkREREQOMCgREREROcCgREREROQAgxIRERGRAwxKRERERA4wKBERERE5wKBERERE5ACDEhEREZEDDEpEREREDjAoERERETnAoERERETkAIMSERERkQMMSkREREQOMCgREREROcCgREREROQAgxIRERGRAwxKRERERA4wKBERERE5wKBERERE5ACDEhEREZEDDEpEREREDjAoERERETnAoERERETkAIMSERERkQMMSkREREQOMCgREREROcCgREREROQAgxIRERGRAwxKRERERA4wKBERERE5wKBERERE5ACDEhEREZEDDEpEREREDjAoERERETnAoERERETkAIMSERERkQMMSkREREQOMCgREREROeAldQFE1D9tySmUugQiol5jjxIRERGRAwxKRERERA4wKBERERE5wDFKRCSJphYzDuVX42pN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etu0aROCgoLw1VdfYeTIkfD398fcuXNRWlpq9xqrVq2ye9309HTcf//9tucLCgqwevVqCIIAQRBs7b7//nvcfPPN8PHxQWxsLB577DHo9XqXnhMici4GJSLyaO+//z7CwsJw6NAhrFy5Eo888gh++ctfYurUqcjNzcXs2bNx3333obGxsdP9Gxsb8ec//xl///vfsX//fhQWFuKJJ57o8uvv2LEDgwYNwksvvYTS0lJbyMrLy8PcuXOxcOFCnDx5Etu2bcP333+PFStWOOV9E1HfYFAiIo82duxYPPfcc0hMTMSaNWugUqkQFhaGBx98EImJiVi7di2qqqpw8uTJTvc3Go3YuHEjJk6ciPHjx2PFihXIysrq8uuHhIRALpcjICAAGo3GdmkvMzMT9957L1atWoXExERMnToVb7zxBj744AM0Nzc75b0TketxjBIRebQxY8bY/i6XyxEaGoqkpCTbtsjISABAeXk51Gp1h/19fX0xdOhQ27+joqJQXl7e67pOnDiBkydPYvPmzbZtoijCYrHgypUrGDlyZK9fg4hcj0GJiDyat7e33b8FQbDb1jZmyGKxdHl/URRt/5bJZHb/Bqy9UNfT0NCAhx9+GI899liH5+Li4q67PxG5BwYlIqJrCA8PtxvcbTabcfr0acycOdO2TaFQwGw22+03fvx4nD17FsOGDeuzWonI+ThGiYjoGm699VZ8/vnn+Pzzz3H+/Hk88sgjHSasjI+Px/79+1FcXIzKykoAwNNPP40DBw5gxYoVOH78OC5evIhPPvmEg7mJPAyDEhHRNfznf/4nli1bhqVLl2LGjBkYMmSIXW8SALz00kvIz8/H0KFDER4eDsA6dmrfvn348ccfcfPNN2PcuHFYu3YtoqOjpXgbRNRDgvjzi+9EREREBIA9SkREREQOMSgREREROcCgREREROQAgxIRERGRAwxKRERERA4wKBERERE5wKBERERE5ACDEhEREZEDDEpEREREDjAoERERETnAoERERETkwP8PKWEgYrOOM8gAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# To see aoulier clearly use boxplot\n",
        "sns.boxplot(df_movie['minute'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "I3HZ8cOkozz6",
        "outputId": "8c727d50-d851-44c5-da88-86e21874ffdb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='minute'>"
            ]
          },
          "metadata": {},
          "execution_count": 125
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Z-score Method"
      ],
      "metadata": {
        "id": "jTNfjWU6pPbK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Finding the Limits\n",
        "upper_limit = df_movie['minute'].mean() + 3*df_movie['minute'].std()\n",
        "lower_limit = df_movie['minute'].mean() - 3*df_movie['minute'].std()\n",
        "\n",
        "print(f'Upper Limit : {upper_limit}')\n",
        "print(f'Lower Limit : {lower_limit}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gW35UuijpXIw",
        "outputId": "e02c35a2-d33a-4556-afbc-a018124930a8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Upper Limit : 181.53773251022983\n",
            "Lower Limit : 18.583128016722057\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Finding the ouliers\n",
        "df_movie.loc[(df_movie['minute'] > upper_limit) | (df_movie['minute'] < lower_limit)]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "qG58TrBCqkhx",
        "outputId": "9af7dc5b-6713-46ec-dea0-ef6f7d0924ee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       show_id   type                                          title  \\\n",
              "142   81172721  Movie                                   King of Boys   \n",
              "635   81035749  Movie                             The Gospel of Luke   \n",
              "637   81035751  Movie                          The Gospel of Matthew   \n",
              "870   70090035  Movie                                   Jodhaa Akbar   \n",
              "1100  80175798  Movie                                   The Irishman   \n",
              "1360    449931  Movie                                 Doctor Zhivago   \n",
              "1395  60011729  Movie                           Mutiny on the Bounty   \n",
              "1446  81020543  Movie              Calico Critters: A Town of Dreams   \n",
              "2013  60027942  Movie                           The Battle of Midway   \n",
              "2363  80059049  Movie                                         Pardes   \n",
              "2379  70019491  Movie                                         Swades   \n",
              "2476  80114804  Movie                 Cosmos Laundromat: First Cycle   \n",
              "2478  70304298  Movie                                         Silent   \n",
              "2524  81110498  Movie                                          ANIMA   \n",
              "2985  80149064  Movie            Buddy Thunderstruck: The Maybe Pile   \n",
              "3538  60000440  Movie                                       Magnolia   \n",
              "3580  60004484  Movie  The Lord of the Rings: The Return of the King   \n",
              "3600  60011597  Movie                                     Wyatt Earp   \n",
              "3657  60035870  Movie                            Hum Aapke Hain Koun   \n",
              "3665  19207412  Movie                                Maine Pyar Kiya   \n",
              "4106  60020906  Movie                                         Lagaan   \n",
              "4227  60002818  Movie                                         Sangam   \n",
              "4489  60021525  Movie                                 Dil Chahta Hai   \n",
              "4501  70001237  Movie                                        Lakshya   \n",
              "4872  70274390  Movie                         Elephants Dream 4 Hour   \n",
              "5003  70123118  Movie                           What's Your Raashee?   \n",
              "5049  80239831  Movie                                           Zion   \n",
              "5541  60036359  Movie                               Schindler's List   \n",
              "\n",
              "                               director  \\\n",
              "142                        Kemi Adetiba   \n",
              "635                         David Batty   \n",
              "637                         David Batty   \n",
              "870                  Ashutosh Gowariker   \n",
              "1100                    Martin Scorsese   \n",
              "1360                         David Lean   \n",
              "1395        Lewis Milestone, Carol Reed   \n",
              "1446                      Momoko Kamiya   \n",
              "2013                          John Ford   \n",
              "2363                       Subhash Ghai   \n",
              "2379                 Ashutosh Gowariker   \n",
              "2476                     Mathieu Auvray   \n",
              "2478  Limbert Fabian, Brandon Oldenburg   \n",
              "2524               Paul Thomas Anderson   \n",
              "2985                      Harry Chaskin   \n",
              "3538               Paul Thomas Anderson   \n",
              "3580                      Peter Jackson   \n",
              "3600                    Lawrence Kasdan   \n",
              "3657                 Sooraj R. Barjatya   \n",
              "3665                 Sooraj R. Barjatya   \n",
              "4106                 Ashutosh Gowariker   \n",
              "4227                         Raj Kapoor   \n",
              "4489                      Farhan Akhtar   \n",
              "4501                      Farhan Akhtar   \n",
              "4872                     Bassam Kurdali   \n",
              "5003                 Ashutosh Gowariker   \n",
              "5049                         Floyd Russ   \n",
              "5541                   Steven Spielberg   \n",
              "\n",
              "                                                   cast  \\\n",
              "142   Sola Sobowale, Adesua Etomi, Remilekun Safaru,...   \n",
              "635   Selva Rasalingam, Karima Gouit, Mourad Zaoui, ...   \n",
              "637   Selva Rasalingam, Mourad Zaoui, Karima Gouit, ...   \n",
              "870   Hrithik Roshan, Aishwarya Rai Bachchan, Sonu S...   \n",
              "1100  Robert De Niro, Al Pacino, Joe Pesci, Harvey K...   \n",
              "1360  Omar Sharif, Julie Christie, Geraldine Chaplin...   \n",
              "1395  Marlon Brando, Trevor Howard, Richard Harris, ...   \n",
              "1446                                                  0   \n",
              "2013                          Henry Fonda, Jane Darwell   \n",
              "2363  Shah Rukh Khan, Amrish Puri, Mahima Chaudhry, ...   \n",
              "2379  Shah Rukh Khan, Gayatri Joshi, Kishori Balal, ...   \n",
              "2476          Pierre Bokma, Reinout Scholten van Aschat   \n",
              "2478                                                  0   \n",
              "2524                                         Thom Yorke   \n",
              "2985  Brian Atkinson, Ted Raimi, Harry Chaskin, Debi...   \n",
              "3538  Jeremy Blackman, Tom Cruise, Melinda Dillon, A...   \n",
              "3580  Elijah Wood, Ian McKellen, Liv Tyler, Viggo Mo...   \n",
              "3600  Kevin Costner, Dennis Quaid, Gene Hackman, Dav...   \n",
              "3657  Madhuri Dixit, Salman Khan, Mohnish Bahl, Renu...   \n",
              "3665  Salman Khan, Bhagyashree, Alok Nath, Rajeev Ve...   \n",
              "4106  Aamir Khan, Gracy Singh, Rachel Shelley, Paul ...   \n",
              "4227  Raj Kapoor, Vyjayanthimala, Rajendra Kumar, La...   \n",
              "4489  Aamir Khan, Saif Ali Khan, Akshaye Khanna, Pre...   \n",
              "4501  Amitabh Bachchan, Hrithik Roshan, Preity Zinta...   \n",
              "4872                          Cas Jansen, Tygo Gernandt   \n",
              "5003  Priyanka Chopra, Harman Baweja, Suzy Brack, Ge...   \n",
              "5049                                         Zion Clark   \n",
              "5541  Liam Neeson, Ben Kingsley, Ralph Fiennes, Caro...   \n",
              "\n",
              "                                                country  release_year rating  \\\n",
              "142                                             Nigeria          2018  TV-MA   \n",
              "635              United States, United Kingdom, Morocco          2015  TV-14   \n",
              "637                            Indonesia, United States          2014  TV-14   \n",
              "870                                               India          2008  TV-14   \n",
              "1100                                      United States          2019      R   \n",
              "1360  United States, Italy, United Kingdom, Liechten...          1965  PG-13   \n",
              "1395                                      United States          1962  TV-PG   \n",
              "1446                                              India          2017   TV-Y   \n",
              "2013                                      United States          1942   TV-G   \n",
              "2363                                              India          1997  TV-14   \n",
              "2379                                              India          2004  TV-PG   \n",
              "2476                                        Netherlands          2015  TV-MA   \n",
              "2478                                      United States          2014  TV-Y7   \n",
              "2524                                     United Kingdom          2019  TV-PG   \n",
              "2985                                      United States          2017  TV-PG   \n",
              "3538                                      United States          1999      R   \n",
              "3580                         New Zealand, United States          2003  PG-13   \n",
              "3600                                      United States          1994  PG-13   \n",
              "3657                                              India          1994     NR   \n",
              "3665                                              India          1989  TV-PG   \n",
              "4106                                              India          2001     PG   \n",
              "4227                                              India          1964  TV-14   \n",
              "4489                                              India          2001  TV-14   \n",
              "4501                                              India          2004  TV-14   \n",
              "4872                                        Netherlands          2006  TV-MA   \n",
              "5003                                              India          2009  TV-PG   \n",
              "5049                                      United States          2018  TV-PG   \n",
              "5541                                      United States          1993      R   \n",
              "\n",
              "     duration                                         listed_in  \\\n",
              "142   182 min                      Dramas, International Movies   \n",
              "635   205 min                      Dramas, Faith & Spirituality   \n",
              "637   190 min                      Dramas, Faith & Spirituality   \n",
              "870   214 min  Action & Adventure, Dramas, International Movies   \n",
              "1100  209 min                                            Dramas   \n",
              "1360  200 min           Classic Movies, Dramas, Romantic Movies   \n",
              "1395  185 min        Action & Adventure, Classic Movies, Dramas   \n",
              "1446   11 min                          Children & Family Movies   \n",
              "2013   18 min                     Classic Movies, Documentaries   \n",
              "2363  187 min     Dramas, International Movies, Romantic Movies   \n",
              "2379  185 min                      Dramas, International Movies   \n",
              "2476   12 min    Dramas, International Movies, Sci-Fi & Fantasy   \n",
              "2478    3 min        Children & Family Movies, Sci-Fi & Fantasy   \n",
              "2524   15 min      Dramas, Independent Movies, Music & Musicals   \n",
              "2985   14 min                                            Movies   \n",
              "3538  189 min                        Dramas, Independent Movies   \n",
              "3580  201 min              Action & Adventure, Sci-Fi & Fantasy   \n",
              "3600  191 min                                Action & Adventure   \n",
              "3657  193 min      Classic Movies, Dramas, International Movies   \n",
              "3665  192 min    Dramas, International Movies, Music & Musicals   \n",
              "4106  224 min    Dramas, International Movies, Music & Musicals   \n",
              "4227  228 min      Classic Movies, Dramas, International Movies   \n",
              "4489  185 min            Comedies, Dramas, International Movies   \n",
              "4501  185 min  Action & Adventure, Dramas, International Movies   \n",
              "4872  196 min            International Movies, Sci-Fi & Fantasy   \n",
              "5003  203 min  Comedies, International Movies, Music & Musicals   \n",
              "5049   12 min                      Documentaries, Sports Movies   \n",
              "5541  195 min                            Classic Movies, Dramas   \n",
              "\n",
              "                                            description  minute day_published  \\\n",
              "142   When a powerful businesswoman‚Äôs political ambi...     182  September 21   \n",
              "635   Word-for-word Bible texts of the entire book o...     205    October 19   \n",
              "637   The Apostle Matthew is highlighted in this wor...     190    October 19   \n",
              "870   In 16th-century India, what begins as a strate...     214     October 1   \n",
              "1100  Hit man Frank Sheeran looks back at the secret...     209   November 27   \n",
              "1360  A young physician and his beautiful mistress g...     200    November 1   \n",
              "1395  Marlon Brando gives a nuanced performance as t...     185    November 1   \n",
              "1446  Freya heads into town with her mother for a ve...      11    November 1   \n",
              "2013  Director John Ford captures combat footage of ...      18      March 31   \n",
              "2363  Prompted by loyalty, Arjun plays matchmaker be...     187       March 1   \n",
              "2379  An Americanized NASA scientist returns to his ...     185       March 1   \n",
              "2476  Despondent on a desolate island, a suicidal sh...      12        June 4   \n",
              "2478  \"Silent\" is an animated short film created by ...       3        June 4   \n",
              "2524  In a short musical film directed by Paul Thoma...      15       June 27   \n",
              "2985  Champion truck-racing dog Buddy and his best f...      14       July 14   \n",
              "3538  Through chance, human action, past history and...     189     January 1   \n",
              "3580  Aragorn is revealed as the heir to the ancient...     201     January 1   \n",
              "3600  Legendary lawman Wyatt Earp is continually at ...     191     January 1   \n",
              "3657  Although Nisha falls for Prem, she agrees to m...     193     January 1   \n",
              "3665  When the son of a wealthy businessman and the ...     192     January 1   \n",
              "4106  In 1890s India, an arrogant British commander ...     224    December 8   \n",
              "4227  Returning home from war after being assumed de...     228   December 31   \n",
              "4489  Inseparable childhood friends Akash, Sameer an...     185   December 15   \n",
              "4501  After dropping out of the army, a spoiled teen...     185   December 15   \n",
              "4872  Friends Proog and Emo live in a capricious, se...     196     August 23   \n",
              "5003  To protect his family from ruin, Yogesh must m...     203     August 15   \n",
              "5049  Born without legs and stuck in foster care for...      12     August 10   \n",
              "5541  Oskar Schindler becomes an unlikely humanitari...     195       April 1   \n",
              "\n",
              "     year_published  \n",
              "142            2019  \n",
              "635            2018  \n",
              "637            2018  \n",
              "870            2018  \n",
              "1100           2019  \n",
              "1360           2019  \n",
              "1395           2019  \n",
              "1446           2018  \n",
              "2013           2017  \n",
              "2363           2018  \n",
              "2379           2018  \n",
              "2476           2019  \n",
              "2478           2019  \n",
              "2524           2019  \n",
              "2985           2017  \n",
              "3538           2020  \n",
              "3580           2020  \n",
              "3600           2020  \n",
              "3657           2018  \n",
              "3665           2018  \n",
              "4106           2017  \n",
              "4227           2019  \n",
              "4489           2019  \n",
              "4501           2019  \n",
              "4872           2018  \n",
              "5003           2018  \n",
              "5049           2018  \n",
              "5541           2018  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ff7b3de5-d0af-4464-b9e9-39589372c23a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>show_id</th>\n",
              "      <th>type</th>\n",
              "      <th>title</th>\n",
              "      <th>director</th>\n",
              "      <th>cast</th>\n",
              "      <th>country</th>\n",
              "      <th>release_year</th>\n",
              "      <th>rating</th>\n",
              "      <th>duration</th>\n",
              "      <th>listed_in</th>\n",
              "      <th>description</th>\n",
              "      <th>minute</th>\n",
              "      <th>day_published</th>\n",
              "      <th>year_published</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>142</th>\n",
              "      <td>81172721</td>\n",
              "      <td>Movie</td>\n",
              "      <td>King of Boys</td>\n",
              "      <td>Kemi Adetiba</td>\n",
              "      <td>Sola Sobowale, Adesua Etomi, Remilekun Safaru,...</td>\n",
              "      <td>Nigeria</td>\n",
              "      <td>2018</td>\n",
              "      <td>TV-MA</td>\n",
              "      <td>182 min</td>\n",
              "      <td>Dramas, International Movies</td>\n",
              "      <td>When a powerful businesswoman‚Äôs political ambi...</td>\n",
              "      <td>182</td>\n",
              "      <td>September 21</td>\n",
              "      <td>2019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>635</th>\n",
              "      <td>81035749</td>\n",
              "      <td>Movie</td>\n",
              "      <td>The Gospel of Luke</td>\n",
              "      <td>David Batty</td>\n",
              "      <td>Selva Rasalingam, Karima Gouit, Mourad Zaoui, ...</td>\n",
              "      <td>United States, United Kingdom, Morocco</td>\n",
              "      <td>2015</td>\n",
              "      <td>TV-14</td>\n",
              "      <td>205 min</td>\n",
              "      <td>Dramas, Faith &amp; Spirituality</td>\n",
              "      <td>Word-for-word Bible texts of the entire book o...</td>\n",
              "      <td>205</td>\n",
              "      <td>October 19</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>637</th>\n",
              "      <td>81035751</td>\n",
              "      <td>Movie</td>\n",
              "      <td>The Gospel of Matthew</td>\n",
              "      <td>David Batty</td>\n",
              "      <td>Selva Rasalingam, Mourad Zaoui, Karima Gouit, ...</td>\n",
              "      <td>Indonesia, United States</td>\n",
              "      <td>2014</td>\n",
              "      <td>TV-14</td>\n",
              "      <td>190 min</td>\n",
              "      <td>Dramas, Faith &amp; Spirituality</td>\n",
              "      <td>The Apostle Matthew is highlighted in this wor...</td>\n",
              "      <td>190</td>\n",
              "      <td>October 19</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>870</th>\n",
              "      <td>70090035</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Jodhaa Akbar</td>\n",
              "      <td>Ashutosh Gowariker</td>\n",
              "      <td>Hrithik Roshan, Aishwarya Rai Bachchan, Sonu S...</td>\n",
              "      <td>India</td>\n",
              "      <td>2008</td>\n",
              "      <td>TV-14</td>\n",
              "      <td>214 min</td>\n",
              "      <td>Action &amp; Adventure, Dramas, International Movies</td>\n",
              "      <td>In 16th-century India, what begins as a strate...</td>\n",
              "      <td>214</td>\n",
              "      <td>October 1</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1100</th>\n",
              "      <td>80175798</td>\n",
              "      <td>Movie</td>\n",
              "      <td>The Irishman</td>\n",
              "      <td>Martin Scorsese</td>\n",
              "      <td>Robert De Niro, Al Pacino, Joe Pesci, Harvey K...</td>\n",
              "      <td>United States</td>\n",
              "      <td>2019</td>\n",
              "      <td>R</td>\n",
              "      <td>209 min</td>\n",
              "      <td>Dramas</td>\n",
              "      <td>Hit man Frank Sheeran looks back at the secret...</td>\n",
              "      <td>209</td>\n",
              "      <td>November 27</td>\n",
              "      <td>2019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1360</th>\n",
              "      <td>449931</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Doctor Zhivago</td>\n",
              "      <td>David Lean</td>\n",
              "      <td>Omar Sharif, Julie Christie, Geraldine Chaplin...</td>\n",
              "      <td>United States, Italy, United Kingdom, Liechten...</td>\n",
              "      <td>1965</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>200 min</td>\n",
              "      <td>Classic Movies, Dramas, Romantic Movies</td>\n",
              "      <td>A young physician and his beautiful mistress g...</td>\n",
              "      <td>200</td>\n",
              "      <td>November 1</td>\n",
              "      <td>2019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1395</th>\n",
              "      <td>60011729</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Mutiny on the Bounty</td>\n",
              "      <td>Lewis Milestone, Carol Reed</td>\n",
              "      <td>Marlon Brando, Trevor Howard, Richard Harris, ...</td>\n",
              "      <td>United States</td>\n",
              "      <td>1962</td>\n",
              "      <td>TV-PG</td>\n",
              "      <td>185 min</td>\n",
              "      <td>Action &amp; Adventure, Classic Movies, Dramas</td>\n",
              "      <td>Marlon Brando gives a nuanced performance as t...</td>\n",
              "      <td>185</td>\n",
              "      <td>November 1</td>\n",
              "      <td>2019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1446</th>\n",
              "      <td>81020543</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Calico Critters: A Town of Dreams</td>\n",
              "      <td>Momoko Kamiya</td>\n",
              "      <td>0</td>\n",
              "      <td>India</td>\n",
              "      <td>2017</td>\n",
              "      <td>TV-Y</td>\n",
              "      <td>11 min</td>\n",
              "      <td>Children &amp; Family Movies</td>\n",
              "      <td>Freya heads into town with her mother for a ve...</td>\n",
              "      <td>11</td>\n",
              "      <td>November 1</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2013</th>\n",
              "      <td>60027942</td>\n",
              "      <td>Movie</td>\n",
              "      <td>The Battle of Midway</td>\n",
              "      <td>John Ford</td>\n",
              "      <td>Henry Fonda, Jane Darwell</td>\n",
              "      <td>United States</td>\n",
              "      <td>1942</td>\n",
              "      <td>TV-G</td>\n",
              "      <td>18 min</td>\n",
              "      <td>Classic Movies, Documentaries</td>\n",
              "      <td>Director John Ford captures combat footage of ...</td>\n",
              "      <td>18</td>\n",
              "      <td>March 31</td>\n",
              "      <td>2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2363</th>\n",
              "      <td>80059049</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Pardes</td>\n",
              "      <td>Subhash Ghai</td>\n",
              "      <td>Shah Rukh Khan, Amrish Puri, Mahima Chaudhry, ...</td>\n",
              "      <td>India</td>\n",
              "      <td>1997</td>\n",
              "      <td>TV-14</td>\n",
              "      <td>187 min</td>\n",
              "      <td>Dramas, International Movies, Romantic Movies</td>\n",
              "      <td>Prompted by loyalty, Arjun plays matchmaker be...</td>\n",
              "      <td>187</td>\n",
              "      <td>March 1</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2379</th>\n",
              "      <td>70019491</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Swades</td>\n",
              "      <td>Ashutosh Gowariker</td>\n",
              "      <td>Shah Rukh Khan, Gayatri Joshi, Kishori Balal, ...</td>\n",
              "      <td>India</td>\n",
              "      <td>2004</td>\n",
              "      <td>TV-PG</td>\n",
              "      <td>185 min</td>\n",
              "      <td>Dramas, International Movies</td>\n",
              "      <td>An Americanized NASA scientist returns to his ...</td>\n",
              "      <td>185</td>\n",
              "      <td>March 1</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2476</th>\n",
              "      <td>80114804</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Cosmos Laundromat: First Cycle</td>\n",
              "      <td>Mathieu Auvray</td>\n",
              "      <td>Pierre Bokma, Reinout Scholten van Aschat</td>\n",
              "      <td>Netherlands</td>\n",
              "      <td>2015</td>\n",
              "      <td>TV-MA</td>\n",
              "      <td>12 min</td>\n",
              "      <td>Dramas, International Movies, Sci-Fi &amp; Fantasy</td>\n",
              "      <td>Despondent on a desolate island, a suicidal sh...</td>\n",
              "      <td>12</td>\n",
              "      <td>June 4</td>\n",
              "      <td>2019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2478</th>\n",
              "      <td>70304298</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Silent</td>\n",
              "      <td>Limbert Fabian, Brandon Oldenburg</td>\n",
              "      <td>0</td>\n",
              "      <td>United States</td>\n",
              "      <td>2014</td>\n",
              "      <td>TV-Y7</td>\n",
              "      <td>3 min</td>\n",
              "      <td>Children &amp; Family Movies, Sci-Fi &amp; Fantasy</td>\n",
              "      <td>\"Silent\" is an animated short film created by ...</td>\n",
              "      <td>3</td>\n",
              "      <td>June 4</td>\n",
              "      <td>2019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2524</th>\n",
              "      <td>81110498</td>\n",
              "      <td>Movie</td>\n",
              "      <td>ANIMA</td>\n",
              "      <td>Paul Thomas Anderson</td>\n",
              "      <td>Thom Yorke</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>2019</td>\n",
              "      <td>TV-PG</td>\n",
              "      <td>15 min</td>\n",
              "      <td>Dramas, Independent Movies, Music &amp; Musicals</td>\n",
              "      <td>In a short musical film directed by Paul Thoma...</td>\n",
              "      <td>15</td>\n",
              "      <td>June 27</td>\n",
              "      <td>2019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2985</th>\n",
              "      <td>80149064</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Buddy Thunderstruck: The Maybe Pile</td>\n",
              "      <td>Harry Chaskin</td>\n",
              "      <td>Brian Atkinson, Ted Raimi, Harry Chaskin, Debi...</td>\n",
              "      <td>United States</td>\n",
              "      <td>2017</td>\n",
              "      <td>TV-PG</td>\n",
              "      <td>14 min</td>\n",
              "      <td>Movies</td>\n",
              "      <td>Champion truck-racing dog Buddy and his best f...</td>\n",
              "      <td>14</td>\n",
              "      <td>July 14</td>\n",
              "      <td>2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3538</th>\n",
              "      <td>60000440</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Magnolia</td>\n",
              "      <td>Paul Thomas Anderson</td>\n",
              "      <td>Jeremy Blackman, Tom Cruise, Melinda Dillon, A...</td>\n",
              "      <td>United States</td>\n",
              "      <td>1999</td>\n",
              "      <td>R</td>\n",
              "      <td>189 min</td>\n",
              "      <td>Dramas, Independent Movies</td>\n",
              "      <td>Through chance, human action, past history and...</td>\n",
              "      <td>189</td>\n",
              "      <td>January 1</td>\n",
              "      <td>2020</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3580</th>\n",
              "      <td>60004484</td>\n",
              "      <td>Movie</td>\n",
              "      <td>The Lord of the Rings: The Return of the King</td>\n",
              "      <td>Peter Jackson</td>\n",
              "      <td>Elijah Wood, Ian McKellen, Liv Tyler, Viggo Mo...</td>\n",
              "      <td>New Zealand, United States</td>\n",
              "      <td>2003</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>201 min</td>\n",
              "      <td>Action &amp; Adventure, Sci-Fi &amp; Fantasy</td>\n",
              "      <td>Aragorn is revealed as the heir to the ancient...</td>\n",
              "      <td>201</td>\n",
              "      <td>January 1</td>\n",
              "      <td>2020</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3600</th>\n",
              "      <td>60011597</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Wyatt Earp</td>\n",
              "      <td>Lawrence Kasdan</td>\n",
              "      <td>Kevin Costner, Dennis Quaid, Gene Hackman, Dav...</td>\n",
              "      <td>United States</td>\n",
              "      <td>1994</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>191 min</td>\n",
              "      <td>Action &amp; Adventure</td>\n",
              "      <td>Legendary lawman Wyatt Earp is continually at ...</td>\n",
              "      <td>191</td>\n",
              "      <td>January 1</td>\n",
              "      <td>2020</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3657</th>\n",
              "      <td>60035870</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Hum Aapke Hain Koun</td>\n",
              "      <td>Sooraj R. Barjatya</td>\n",
              "      <td>Madhuri Dixit, Salman Khan, Mohnish Bahl, Renu...</td>\n",
              "      <td>India</td>\n",
              "      <td>1994</td>\n",
              "      <td>NR</td>\n",
              "      <td>193 min</td>\n",
              "      <td>Classic Movies, Dramas, International Movies</td>\n",
              "      <td>Although Nisha falls for Prem, she agrees to m...</td>\n",
              "      <td>193</td>\n",
              "      <td>January 1</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3665</th>\n",
              "      <td>19207412</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Maine Pyar Kiya</td>\n",
              "      <td>Sooraj R. Barjatya</td>\n",
              "      <td>Salman Khan, Bhagyashree, Alok Nath, Rajeev Ve...</td>\n",
              "      <td>India</td>\n",
              "      <td>1989</td>\n",
              "      <td>TV-PG</td>\n",
              "      <td>192 min</td>\n",
              "      <td>Dramas, International Movies, Music &amp; Musicals</td>\n",
              "      <td>When the son of a wealthy businessman and the ...</td>\n",
              "      <td>192</td>\n",
              "      <td>January 1</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4106</th>\n",
              "      <td>60020906</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Lagaan</td>\n",
              "      <td>Ashutosh Gowariker</td>\n",
              "      <td>Aamir Khan, Gracy Singh, Rachel Shelley, Paul ...</td>\n",
              "      <td>India</td>\n",
              "      <td>2001</td>\n",
              "      <td>PG</td>\n",
              "      <td>224 min</td>\n",
              "      <td>Dramas, International Movies, Music &amp; Musicals</td>\n",
              "      <td>In 1890s India, an arrogant British commander ...</td>\n",
              "      <td>224</td>\n",
              "      <td>December 8</td>\n",
              "      <td>2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4227</th>\n",
              "      <td>60002818</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Sangam</td>\n",
              "      <td>Raj Kapoor</td>\n",
              "      <td>Raj Kapoor, Vyjayanthimala, Rajendra Kumar, La...</td>\n",
              "      <td>India</td>\n",
              "      <td>1964</td>\n",
              "      <td>TV-14</td>\n",
              "      <td>228 min</td>\n",
              "      <td>Classic Movies, Dramas, International Movies</td>\n",
              "      <td>Returning home from war after being assumed de...</td>\n",
              "      <td>228</td>\n",
              "      <td>December 31</td>\n",
              "      <td>2019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4489</th>\n",
              "      <td>60021525</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Dil Chahta Hai</td>\n",
              "      <td>Farhan Akhtar</td>\n",
              "      <td>Aamir Khan, Saif Ali Khan, Akshaye Khanna, Pre...</td>\n",
              "      <td>India</td>\n",
              "      <td>2001</td>\n",
              "      <td>TV-14</td>\n",
              "      <td>185 min</td>\n",
              "      <td>Comedies, Dramas, International Movies</td>\n",
              "      <td>Inseparable childhood friends Akash, Sameer an...</td>\n",
              "      <td>185</td>\n",
              "      <td>December 15</td>\n",
              "      <td>2019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4501</th>\n",
              "      <td>70001237</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Lakshya</td>\n",
              "      <td>Farhan Akhtar</td>\n",
              "      <td>Amitabh Bachchan, Hrithik Roshan, Preity Zinta...</td>\n",
              "      <td>India</td>\n",
              "      <td>2004</td>\n",
              "      <td>TV-14</td>\n",
              "      <td>185 min</td>\n",
              "      <td>Action &amp; Adventure, Dramas, International Movies</td>\n",
              "      <td>After dropping out of the army, a spoiled teen...</td>\n",
              "      <td>185</td>\n",
              "      <td>December 15</td>\n",
              "      <td>2019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4872</th>\n",
              "      <td>70274390</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Elephants Dream 4 Hour</td>\n",
              "      <td>Bassam Kurdali</td>\n",
              "      <td>Cas Jansen, Tygo Gernandt</td>\n",
              "      <td>Netherlands</td>\n",
              "      <td>2006</td>\n",
              "      <td>TV-MA</td>\n",
              "      <td>196 min</td>\n",
              "      <td>International Movies, Sci-Fi &amp; Fantasy</td>\n",
              "      <td>Friends Proog and Emo live in a capricious, se...</td>\n",
              "      <td>196</td>\n",
              "      <td>August 23</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5003</th>\n",
              "      <td>70123118</td>\n",
              "      <td>Movie</td>\n",
              "      <td>What's Your Raashee?</td>\n",
              "      <td>Ashutosh Gowariker</td>\n",
              "      <td>Priyanka Chopra, Harman Baweja, Suzy Brack, Ge...</td>\n",
              "      <td>India</td>\n",
              "      <td>2009</td>\n",
              "      <td>TV-PG</td>\n",
              "      <td>203 min</td>\n",
              "      <td>Comedies, International Movies, Music &amp; Musicals</td>\n",
              "      <td>To protect his family from ruin, Yogesh must m...</td>\n",
              "      <td>203</td>\n",
              "      <td>August 15</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5049</th>\n",
              "      <td>80239831</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Zion</td>\n",
              "      <td>Floyd Russ</td>\n",
              "      <td>Zion Clark</td>\n",
              "      <td>United States</td>\n",
              "      <td>2018</td>\n",
              "      <td>TV-PG</td>\n",
              "      <td>12 min</td>\n",
              "      <td>Documentaries, Sports Movies</td>\n",
              "      <td>Born without legs and stuck in foster care for...</td>\n",
              "      <td>12</td>\n",
              "      <td>August 10</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5541</th>\n",
              "      <td>60036359</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Schindler's List</td>\n",
              "      <td>Steven Spielberg</td>\n",
              "      <td>Liam Neeson, Ben Kingsley, Ralph Fiennes, Caro...</td>\n",
              "      <td>United States</td>\n",
              "      <td>1993</td>\n",
              "      <td>R</td>\n",
              "      <td>195 min</td>\n",
              "      <td>Classic Movies, Dramas</td>\n",
              "      <td>Oskar Schindler becomes an unlikely humanitari...</td>\n",
              "      <td>195</td>\n",
              "      <td>April 1</td>\n",
              "      <td>2018</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ff7b3de5-d0af-4464-b9e9-39589372c23a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ff7b3de5-d0af-4464-b9e9-39589372c23a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ff7b3de5-d0af-4464-b9e9-39589372c23a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ad83473e-7f84-423f-b88e-a4c27f431472\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ad83473e-7f84-423f-b88e-a4c27f431472')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ad83473e-7f84-423f-b88e-a4c27f431472 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 130
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# TRIMMING - deleting the outliers\n",
        "# getting the opposite of the above by using\n",
        "\n",
        "# using ~\n",
        "#df_movie_new = df_movie.loc[~(df_movie['minute'] > upper_limit) | (df_movie['minute'] < lower_limit)]\n",
        "#df_movie_new\n",
        "\n",
        "# interchanging the inequalities in the above\n",
        "df_movie_new = df_movie.loc[(df_movie['minute'] < upper_limit) & (df_movie['minute'] > lower_limit)]\n",
        "df_movie_new.reset_index()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "NF1Aa7ezrw4t",
        "outputId": "fea56d7f-2715-4530-a9fa-e3f25be2d071"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      index   show_id   type                                    title  \\\n",
              "0         0  81145628  Movie  Norm of the North: King Sized Adventure   \n",
              "1         4  80125979  Movie                             #realityhigh   \n",
              "2         6  70304989  Movie                                 Automata   \n",
              "3         7  80164077  Movie       Fabrizio Copano: Solo pienso en mi   \n",
              "4         9  70304990  Movie                              Good People   \n",
              "...     ...       ...    ...                                      ...   \n",
              "4104   5575  80093107  Movie                                     Toro   \n",
              "4105   5577  80085438  Movie                          Frank and Cindy   \n",
              "4106   5578  80085439  Movie                          Frank and Cindy   \n",
              "4107   5579  80011846  Movie                                  Iverson   \n",
              "4108   5580  80064521  Movie      Jeremy Scott: The People's Designer   \n",
              "\n",
              "                             director  \\\n",
              "0            Richard Finn, Tim Maltby   \n",
              "1                    Fernando Lebrija   \n",
              "2                         Gabe Ib√°√±ez   \n",
              "3     Rodrigo Toro, Francisco Schultz   \n",
              "4                   Henrik Ruben Genz   \n",
              "...                               ...   \n",
              "4104                      Kike Ma√≠llo   \n",
              "4105                 G.J. Echternkamp   \n",
              "4106                 G.J. Echternkamp   \n",
              "4107                   Zatella Beatty   \n",
              "4108                       Vlad Yudin   \n",
              "\n",
              "                                                   cast  \\\n",
              "0     Alan Marriott, Andrew Toth, Brian Dobson, Cole...   \n",
              "1     Nesta Cooper, Kate Walsh, John Michael Higgins...   \n",
              "2     Antonio Banderas, Dylan McDermott, Melanie Gri...   \n",
              "3                                       Fabrizio Copano   \n",
              "4     James Franco, Kate Hudson, Tom Wilkinson, Omar...   \n",
              "...                                                 ...   \n",
              "4104  Mario Casas, Luis Tosar, Jos√© Sacrist√°n, Claud...   \n",
              "4105                                                  0   \n",
              "4106  Rene Russo, Oliver Platt, Johnny Simmons, Jane...   \n",
              "4107                                      Allen Iverson   \n",
              "4108                                       Jeremy Scott   \n",
              "\n",
              "                                             country  release_year rating  \\\n",
              "0           United States, India, South Korea, China          2019  TV-PG   \n",
              "1                                      United States          2017  TV-14   \n",
              "2             Bulgaria, United States, Spain, Canada          2014      R   \n",
              "3                                              Chile          2017  TV-MA   \n",
              "4     United States, United Kingdom, Denmark, Sweden          2014      R   \n",
              "...                                              ...           ...    ...   \n",
              "4104                                           Spain          2016     NR   \n",
              "4105                                   United States          2007  TV-MA   \n",
              "4106                                   United States          2015      R   \n",
              "4107                                   United States          2014     NR   \n",
              "4108                                   United States          2015  PG-13   \n",
              "\n",
              "     duration                                          listed_in  \\\n",
              "0      90 min                 Children & Family Movies, Comedies   \n",
              "1      99 min                                           Comedies   \n",
              "2     110 min  International Movies, Sci-Fi & Fantasy, Thrillers   \n",
              "3      60 min                                    Stand-Up Comedy   \n",
              "4      90 min                      Action & Adventure, Thrillers   \n",
              "...       ...                                                ...   \n",
              "4104  106 min            Dramas, International Movies, Thrillers   \n",
              "4105   70 min                                      Documentaries   \n",
              "4106  102 min               Comedies, Dramas, Independent Movies   \n",
              "4107   88 min                       Documentaries, Sports Movies   \n",
              "4108  109 min                                      Documentaries   \n",
              "\n",
              "                                            description  minute day_published  \\\n",
              "0     Before planning an awesome wedding for his gra...      90   September 9   \n",
              "1     When nerdy high schooler Dani finally attracts...      99   September 8   \n",
              "2     In a dystopian future, an insurance adjuster f...     110   September 8   \n",
              "3     Fabrizio Copano takes audience participation t...      60   September 8   \n",
              "4     A struggling couple can't believe their luck w...      90   September 8   \n",
              "...                                                 ...     ...           ...   \n",
              "4104  Ex-con Toro's brother and former partner in cr...     106       April 1   \n",
              "4105  Frank was a rising pop star when he married Ci...      70       April 1   \n",
              "4106  A student filmmaker vengefully turns his camer...     102       April 1   \n",
              "4107  This unfiltered documentary follows the rocky ...      88       April 1   \n",
              "4108  The journey of fashion designer Jeremy Scott f...     109       April 1   \n",
              "\n",
              "     year_published  \n",
              "0              2019  \n",
              "1              2017  \n",
              "2              2017  \n",
              "3              2017  \n",
              "4              2017  \n",
              "...             ...  \n",
              "4104           2017  \n",
              "4105           2016  \n",
              "4106           2016  \n",
              "4107           2016  \n",
              "4108           2016  \n",
              "\n",
              "[4109 rows x 15 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b58f1fe1-d81c-4483-bdaf-be1e21715e59\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>show_id</th>\n",
              "      <th>type</th>\n",
              "      <th>title</th>\n",
              "      <th>director</th>\n",
              "      <th>cast</th>\n",
              "      <th>country</th>\n",
              "      <th>release_year</th>\n",
              "      <th>rating</th>\n",
              "      <th>duration</th>\n",
              "      <th>listed_in</th>\n",
              "      <th>description</th>\n",
              "      <th>minute</th>\n",
              "      <th>day_published</th>\n",
              "      <th>year_published</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>81145628</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Norm of the North: King Sized Adventure</td>\n",
              "      <td>Richard Finn, Tim Maltby</td>\n",
              "      <td>Alan Marriott, Andrew Toth, Brian Dobson, Cole...</td>\n",
              "      <td>United States, India, South Korea, China</td>\n",
              "      <td>2019</td>\n",
              "      <td>TV-PG</td>\n",
              "      <td>90 min</td>\n",
              "      <td>Children &amp; Family Movies, Comedies</td>\n",
              "      <td>Before planning an awesome wedding for his gra...</td>\n",
              "      <td>90</td>\n",
              "      <td>September 9</td>\n",
              "      <td>2019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4</td>\n",
              "      <td>80125979</td>\n",
              "      <td>Movie</td>\n",
              "      <td>#realityhigh</td>\n",
              "      <td>Fernando Lebrija</td>\n",
              "      <td>Nesta Cooper, Kate Walsh, John Michael Higgins...</td>\n",
              "      <td>United States</td>\n",
              "      <td>2017</td>\n",
              "      <td>TV-14</td>\n",
              "      <td>99 min</td>\n",
              "      <td>Comedies</td>\n",
              "      <td>When nerdy high schooler Dani finally attracts...</td>\n",
              "      <td>99</td>\n",
              "      <td>September 8</td>\n",
              "      <td>2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>6</td>\n",
              "      <td>70304989</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Automata</td>\n",
              "      <td>Gabe Ib√°√±ez</td>\n",
              "      <td>Antonio Banderas, Dylan McDermott, Melanie Gri...</td>\n",
              "      <td>Bulgaria, United States, Spain, Canada</td>\n",
              "      <td>2014</td>\n",
              "      <td>R</td>\n",
              "      <td>110 min</td>\n",
              "      <td>International Movies, Sci-Fi &amp; Fantasy, Thrillers</td>\n",
              "      <td>In a dystopian future, an insurance adjuster f...</td>\n",
              "      <td>110</td>\n",
              "      <td>September 8</td>\n",
              "      <td>2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>7</td>\n",
              "      <td>80164077</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Fabrizio Copano: Solo pienso en mi</td>\n",
              "      <td>Rodrigo Toro, Francisco Schultz</td>\n",
              "      <td>Fabrizio Copano</td>\n",
              "      <td>Chile</td>\n",
              "      <td>2017</td>\n",
              "      <td>TV-MA</td>\n",
              "      <td>60 min</td>\n",
              "      <td>Stand-Up Comedy</td>\n",
              "      <td>Fabrizio Copano takes audience participation t...</td>\n",
              "      <td>60</td>\n",
              "      <td>September 8</td>\n",
              "      <td>2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>9</td>\n",
              "      <td>70304990</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Good People</td>\n",
              "      <td>Henrik Ruben Genz</td>\n",
              "      <td>James Franco, Kate Hudson, Tom Wilkinson, Omar...</td>\n",
              "      <td>United States, United Kingdom, Denmark, Sweden</td>\n",
              "      <td>2014</td>\n",
              "      <td>R</td>\n",
              "      <td>90 min</td>\n",
              "      <td>Action &amp; Adventure, Thrillers</td>\n",
              "      <td>A struggling couple can't believe their luck w...</td>\n",
              "      <td>90</td>\n",
              "      <td>September 8</td>\n",
              "      <td>2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4104</th>\n",
              "      <td>5575</td>\n",
              "      <td>80093107</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Toro</td>\n",
              "      <td>Kike Ma√≠llo</td>\n",
              "      <td>Mario Casas, Luis Tosar, Jos√© Sacrist√°n, Claud...</td>\n",
              "      <td>Spain</td>\n",
              "      <td>2016</td>\n",
              "      <td>NR</td>\n",
              "      <td>106 min</td>\n",
              "      <td>Dramas, International Movies, Thrillers</td>\n",
              "      <td>Ex-con Toro's brother and former partner in cr...</td>\n",
              "      <td>106</td>\n",
              "      <td>April 1</td>\n",
              "      <td>2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4105</th>\n",
              "      <td>5577</td>\n",
              "      <td>80085438</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Frank and Cindy</td>\n",
              "      <td>G.J. Echternkamp</td>\n",
              "      <td>0</td>\n",
              "      <td>United States</td>\n",
              "      <td>2007</td>\n",
              "      <td>TV-MA</td>\n",
              "      <td>70 min</td>\n",
              "      <td>Documentaries</td>\n",
              "      <td>Frank was a rising pop star when he married Ci...</td>\n",
              "      <td>70</td>\n",
              "      <td>April 1</td>\n",
              "      <td>2016</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4106</th>\n",
              "      <td>5578</td>\n",
              "      <td>80085439</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Frank and Cindy</td>\n",
              "      <td>G.J. Echternkamp</td>\n",
              "      <td>Rene Russo, Oliver Platt, Johnny Simmons, Jane...</td>\n",
              "      <td>United States</td>\n",
              "      <td>2015</td>\n",
              "      <td>R</td>\n",
              "      <td>102 min</td>\n",
              "      <td>Comedies, Dramas, Independent Movies</td>\n",
              "      <td>A student filmmaker vengefully turns his camer...</td>\n",
              "      <td>102</td>\n",
              "      <td>April 1</td>\n",
              "      <td>2016</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4107</th>\n",
              "      <td>5579</td>\n",
              "      <td>80011846</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Iverson</td>\n",
              "      <td>Zatella Beatty</td>\n",
              "      <td>Allen Iverson</td>\n",
              "      <td>United States</td>\n",
              "      <td>2014</td>\n",
              "      <td>NR</td>\n",
              "      <td>88 min</td>\n",
              "      <td>Documentaries, Sports Movies</td>\n",
              "      <td>This unfiltered documentary follows the rocky ...</td>\n",
              "      <td>88</td>\n",
              "      <td>April 1</td>\n",
              "      <td>2016</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4108</th>\n",
              "      <td>5580</td>\n",
              "      <td>80064521</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Jeremy Scott: The People's Designer</td>\n",
              "      <td>Vlad Yudin</td>\n",
              "      <td>Jeremy Scott</td>\n",
              "      <td>United States</td>\n",
              "      <td>2015</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>109 min</td>\n",
              "      <td>Documentaries</td>\n",
              "      <td>The journey of fashion designer Jeremy Scott f...</td>\n",
              "      <td>109</td>\n",
              "      <td>April 1</td>\n",
              "      <td>2016</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4109 rows √ó 15 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b58f1fe1-d81c-4483-bdaf-be1e21715e59')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b58f1fe1-d81c-4483-bdaf-be1e21715e59 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b58f1fe1-d81c-4483-bdaf-be1e21715e59');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9a03ba47-c98d-4add-832f-bb5bf289c8c1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9a03ba47-c98d-4add-832f-bb5bf289c8c1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9a03ba47-c98d-4add-832f-bb5bf289c8c1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_movie_new\",\n  \"rows\": 4109,\n  \"fields\": [\n    {\n      \"column\": \"index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1592,\n        \"min\": 0,\n        \"max\": 5580,\n        \"num_unique_values\": 4109,\n        \"samples\": [\n          2701,\n          4899,\n          3645\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"show_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12979304,\n        \"min\": 247747,\n        \"max\": 81235729,\n        \"num_unique_values\": 4109,\n        \"samples\": [\n          81062606,\n          80115686,\n          80084756\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Movie\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4085,\n        \"samples\": [\n          \"A Witches' Ball\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"director\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3190,\n        \"samples\": [\n          \"Han Han\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cast\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3660,\n        \"samples\": [\n          \"Madhampatti Rangaraj, Shweta Tripathi, Vela Ramamoorthy, Ankur Vikal, G. Marimuthu, Sunny Charles\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 475,\n        \"samples\": [\n          \"Serbia, South Korea, Slovenia\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"release_year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 1942,\n        \"max\": 2020,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          1991\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"TV-G\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 157,\n        \"samples\": [\n          \"30 min\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"listed_in\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 248,\n        \"samples\": [\n          \"Documentaries, International Movies\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4101,\n        \"samples\": [\n          \"Scientists research the world\\u2019s deadliest hurricane, trying to understand what this 18th-century storm could tell us about our own future.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"minute\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26,\n        \"min\": 19,\n        \"max\": 181,\n        \"num_unique_values\": 157,\n        \"samples\": [\n          30\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"day_published\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 362,\n        \"samples\": [\n          \"June 26\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year_published\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \" 2020\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 137
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(f'Old data length: {len(df_movie)}')\n",
        "print(f'New data length: {len(df_movie_new)}')\n",
        "print(f'Number of rows being removed: {len(df_movie) - len(df_movie_new)}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I1SbmLG7sSNP",
        "outputId": "dd89b325-5d21-4847-b180-79ff44b01f94"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Old data length: 4137\n",
            "New data length: 4109\n",
            "Number of rows being removed: 28\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(df_movie_new['minute'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "euT0RWwBupyQ",
        "outputId": "0a763629-a21b-40bb-a686-7609be19c0cf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='minute'>"
            ]
          },
          "metadata": {},
          "execution_count": 142
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# CAPPING - changing the ouliers value to upper or lower values\n",
        "new_df = df_movie.copy()\n",
        "new_df.loc[(new_df['minute'] > upper_limit, 'minute')] = upper_limit\n",
        "new_df.loc[(new_df['minute'] < lower_limit, 'minute')] = lower_limit\n",
        "\n",
        "sns.boxplot(new_df['minute'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "5Ks8yeSWuR6J",
        "outputId": "d88199f0-1504-4810-ec77-d2d38a825478"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='minute'>"
            ]
          },
          "metadata": {},
          "execution_count": 143
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Inter-quartile Range Method (IQR)"
      ],
      "metadata": {
        "id": "8fE9lgGxwWiW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "len(new_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Hv24hSt_weuc",
        "outputId": "e0874a70-524b-4255-c4fd-9c04d329df60"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4137"
            ]
          },
          "metadata": {},
          "execution_count": 144
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "q1 = new_df['minute'].quantile(0.25)\n",
        "q3 = new_df['minute'].quantile(0.75)\n",
        "Iqr = q3 - q1\n",
        "print(f'Q1 : {q1}')\n",
        "print(f'Q3 : {q3}')\n",
        "print(f'IQR : {Iqr}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6CSqsQfDw2It",
        "outputId": "f9f55759-4376-480a-8e7c-ddfc14ad46eb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Q1 : 86.0\n",
            "Q3 : 115.0\n",
            "IQR : 29.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "upper_limmit = q3 + (1.5 * Iqr)\n",
        "lower_limmit = q3 - (1.5 * Iqr)\n",
        "print(f'Lower Limit : {lower_limmit}')\n",
        "print(f'Upper Limit : {upper_limmit}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0PogBWoHxovc",
        "outputId": "15cf52c4-10c3-464c-cb4f-97bc28819383"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Lower Limit : 71.5\n",
            "Upper Limit : 158.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "new_df_1 = new_df.loc[(new_df['minute'] < upper_limit) & (new_df['minute'] > lower_limit)]\n",
        "new_df_1.reset_index()"
      ],
      "metadata": {
        "id": "1aYyT-HkzZ2A",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "86f66211-32b2-44be-f4ed-183d7ab5e9d2"
      },
      "execution_count": 149,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      index   show_id   type                                    title  \\\n",
              "0         0  81145628  Movie  Norm of the North: King Sized Adventure   \n",
              "1         4  80125979  Movie                             #realityhigh   \n",
              "2         6  70304989  Movie                                 Automata   \n",
              "3         7  80164077  Movie       Fabrizio Copano: Solo pienso en mi   \n",
              "4         9  70304990  Movie                              Good People   \n",
              "...     ...       ...    ...                                      ...   \n",
              "4104   5575  80093107  Movie                                     Toro   \n",
              "4105   5577  80085438  Movie                          Frank and Cindy   \n",
              "4106   5578  80085439  Movie                          Frank and Cindy   \n",
              "4107   5579  80011846  Movie                                  Iverson   \n",
              "4108   5580  80064521  Movie      Jeremy Scott: The People's Designer   \n",
              "\n",
              "                             director  \\\n",
              "0            Richard Finn, Tim Maltby   \n",
              "1                    Fernando Lebrija   \n",
              "2                         Gabe Ib√°√±ez   \n",
              "3     Rodrigo Toro, Francisco Schultz   \n",
              "4                   Henrik Ruben Genz   \n",
              "...                               ...   \n",
              "4104                      Kike Ma√≠llo   \n",
              "4105                 G.J. Echternkamp   \n",
              "4106                 G.J. Echternkamp   \n",
              "4107                   Zatella Beatty   \n",
              "4108                       Vlad Yudin   \n",
              "\n",
              "                                                   cast  \\\n",
              "0     Alan Marriott, Andrew Toth, Brian Dobson, Cole...   \n",
              "1     Nesta Cooper, Kate Walsh, John Michael Higgins...   \n",
              "2     Antonio Banderas, Dylan McDermott, Melanie Gri...   \n",
              "3                                       Fabrizio Copano   \n",
              "4     James Franco, Kate Hudson, Tom Wilkinson, Omar...   \n",
              "...                                                 ...   \n",
              "4104  Mario Casas, Luis Tosar, Jos√© Sacrist√°n, Claud...   \n",
              "4105                                                  0   \n",
              "4106  Rene Russo, Oliver Platt, Johnny Simmons, Jane...   \n",
              "4107                                      Allen Iverson   \n",
              "4108                                       Jeremy Scott   \n",
              "\n",
              "                                             country  release_year rating  \\\n",
              "0           United States, India, South Korea, China          2019  TV-PG   \n",
              "1                                      United States          2017  TV-14   \n",
              "2             Bulgaria, United States, Spain, Canada          2014      R   \n",
              "3                                              Chile          2017  TV-MA   \n",
              "4     United States, United Kingdom, Denmark, Sweden          2014      R   \n",
              "...                                              ...           ...    ...   \n",
              "4104                                           Spain          2016     NR   \n",
              "4105                                   United States          2007  TV-MA   \n",
              "4106                                   United States          2015      R   \n",
              "4107                                   United States          2014     NR   \n",
              "4108                                   United States          2015  PG-13   \n",
              "\n",
              "     duration                                          listed_in  \\\n",
              "0      90 min                 Children & Family Movies, Comedies   \n",
              "1      99 min                                           Comedies   \n",
              "2     110 min  International Movies, Sci-Fi & Fantasy, Thrillers   \n",
              "3      60 min                                    Stand-Up Comedy   \n",
              "4      90 min                      Action & Adventure, Thrillers   \n",
              "...       ...                                                ...   \n",
              "4104  106 min            Dramas, International Movies, Thrillers   \n",
              "4105   70 min                                      Documentaries   \n",
              "4106  102 min               Comedies, Dramas, Independent Movies   \n",
              "4107   88 min                       Documentaries, Sports Movies   \n",
              "4108  109 min                                      Documentaries   \n",
              "\n",
              "                                            description  minute day_published  \\\n",
              "0     Before planning an awesome wedding for his gra...    90.0   September 9   \n",
              "1     When nerdy high schooler Dani finally attracts...    99.0   September 8   \n",
              "2     In a dystopian future, an insurance adjuster f...   110.0   September 8   \n",
              "3     Fabrizio Copano takes audience participation t...    60.0   September 8   \n",
              "4     A struggling couple can't believe their luck w...    90.0   September 8   \n",
              "...                                                 ...     ...           ...   \n",
              "4104  Ex-con Toro's brother and former partner in cr...   106.0       April 1   \n",
              "4105  Frank was a rising pop star when he married Ci...    70.0       April 1   \n",
              "4106  A student filmmaker vengefully turns his camer...   102.0       April 1   \n",
              "4107  This unfiltered documentary follows the rocky ...    88.0       April 1   \n",
              "4108  The journey of fashion designer Jeremy Scott f...   109.0       April 1   \n",
              "\n",
              "     year_published  \n",
              "0              2019  \n",
              "1              2017  \n",
              "2              2017  \n",
              "3              2017  \n",
              "4              2017  \n",
              "...             ...  \n",
              "4104           2017  \n",
              "4105           2016  \n",
              "4106           2016  \n",
              "4107           2016  \n",
              "4108           2016  \n",
              "\n",
              "[4109 rows x 15 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0f3ffc2b-4c4a-497c-8c09-4e6a6e6347ed\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>show_id</th>\n",
              "      <th>type</th>\n",
              "      <th>title</th>\n",
              "      <th>director</th>\n",
              "      <th>cast</th>\n",
              "      <th>country</th>\n",
              "      <th>release_year</th>\n",
              "      <th>rating</th>\n",
              "      <th>duration</th>\n",
              "      <th>listed_in</th>\n",
              "      <th>description</th>\n",
              "      <th>minute</th>\n",
              "      <th>day_published</th>\n",
              "      <th>year_published</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>81145628</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Norm of the North: King Sized Adventure</td>\n",
              "      <td>Richard Finn, Tim Maltby</td>\n",
              "      <td>Alan Marriott, Andrew Toth, Brian Dobson, Cole...</td>\n",
              "      <td>United States, India, South Korea, China</td>\n",
              "      <td>2019</td>\n",
              "      <td>TV-PG</td>\n",
              "      <td>90 min</td>\n",
              "      <td>Children &amp; Family Movies, Comedies</td>\n",
              "      <td>Before planning an awesome wedding for his gra...</td>\n",
              "      <td>90.0</td>\n",
              "      <td>September 9</td>\n",
              "      <td>2019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4</td>\n",
              "      <td>80125979</td>\n",
              "      <td>Movie</td>\n",
              "      <td>#realityhigh</td>\n",
              "      <td>Fernando Lebrija</td>\n",
              "      <td>Nesta Cooper, Kate Walsh, John Michael Higgins...</td>\n",
              "      <td>United States</td>\n",
              "      <td>2017</td>\n",
              "      <td>TV-14</td>\n",
              "      <td>99 min</td>\n",
              "      <td>Comedies</td>\n",
              "      <td>When nerdy high schooler Dani finally attracts...</td>\n",
              "      <td>99.0</td>\n",
              "      <td>September 8</td>\n",
              "      <td>2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>6</td>\n",
              "      <td>70304989</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Automata</td>\n",
              "      <td>Gabe Ib√°√±ez</td>\n",
              "      <td>Antonio Banderas, Dylan McDermott, Melanie Gri...</td>\n",
              "      <td>Bulgaria, United States, Spain, Canada</td>\n",
              "      <td>2014</td>\n",
              "      <td>R</td>\n",
              "      <td>110 min</td>\n",
              "      <td>International Movies, Sci-Fi &amp; Fantasy, Thrillers</td>\n",
              "      <td>In a dystopian future, an insurance adjuster f...</td>\n",
              "      <td>110.0</td>\n",
              "      <td>September 8</td>\n",
              "      <td>2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>7</td>\n",
              "      <td>80164077</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Fabrizio Copano: Solo pienso en mi</td>\n",
              "      <td>Rodrigo Toro, Francisco Schultz</td>\n",
              "      <td>Fabrizio Copano</td>\n",
              "      <td>Chile</td>\n",
              "      <td>2017</td>\n",
              "      <td>TV-MA</td>\n",
              "      <td>60 min</td>\n",
              "      <td>Stand-Up Comedy</td>\n",
              "      <td>Fabrizio Copano takes audience participation t...</td>\n",
              "      <td>60.0</td>\n",
              "      <td>September 8</td>\n",
              "      <td>2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>9</td>\n",
              "      <td>70304990</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Good People</td>\n",
              "      <td>Henrik Ruben Genz</td>\n",
              "      <td>James Franco, Kate Hudson, Tom Wilkinson, Omar...</td>\n",
              "      <td>United States, United Kingdom, Denmark, Sweden</td>\n",
              "      <td>2014</td>\n",
              "      <td>R</td>\n",
              "      <td>90 min</td>\n",
              "      <td>Action &amp; Adventure, Thrillers</td>\n",
              "      <td>A struggling couple can't believe their luck w...</td>\n",
              "      <td>90.0</td>\n",
              "      <td>September 8</td>\n",
              "      <td>2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4104</th>\n",
              "      <td>5575</td>\n",
              "      <td>80093107</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Toro</td>\n",
              "      <td>Kike Ma√≠llo</td>\n",
              "      <td>Mario Casas, Luis Tosar, Jos√© Sacrist√°n, Claud...</td>\n",
              "      <td>Spain</td>\n",
              "      <td>2016</td>\n",
              "      <td>NR</td>\n",
              "      <td>106 min</td>\n",
              "      <td>Dramas, International Movies, Thrillers</td>\n",
              "      <td>Ex-con Toro's brother and former partner in cr...</td>\n",
              "      <td>106.0</td>\n",
              "      <td>April 1</td>\n",
              "      <td>2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4105</th>\n",
              "      <td>5577</td>\n",
              "      <td>80085438</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Frank and Cindy</td>\n",
              "      <td>G.J. Echternkamp</td>\n",
              "      <td>0</td>\n",
              "      <td>United States</td>\n",
              "      <td>2007</td>\n",
              "      <td>TV-MA</td>\n",
              "      <td>70 min</td>\n",
              "      <td>Documentaries</td>\n",
              "      <td>Frank was a rising pop star when he married Ci...</td>\n",
              "      <td>70.0</td>\n",
              "      <td>April 1</td>\n",
              "      <td>2016</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4106</th>\n",
              "      <td>5578</td>\n",
              "      <td>80085439</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Frank and Cindy</td>\n",
              "      <td>G.J. Echternkamp</td>\n",
              "      <td>Rene Russo, Oliver Platt, Johnny Simmons, Jane...</td>\n",
              "      <td>United States</td>\n",
              "      <td>2015</td>\n",
              "      <td>R</td>\n",
              "      <td>102 min</td>\n",
              "      <td>Comedies, Dramas, Independent Movies</td>\n",
              "      <td>A student filmmaker vengefully turns his camer...</td>\n",
              "      <td>102.0</td>\n",
              "      <td>April 1</td>\n",
              "      <td>2016</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4107</th>\n",
              "      <td>5579</td>\n",
              "      <td>80011846</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Iverson</td>\n",
              "      <td>Zatella Beatty</td>\n",
              "      <td>Allen Iverson</td>\n",
              "      <td>United States</td>\n",
              "      <td>2014</td>\n",
              "      <td>NR</td>\n",
              "      <td>88 min</td>\n",
              "      <td>Documentaries, Sports Movies</td>\n",
              "      <td>This unfiltered documentary follows the rocky ...</td>\n",
              "      <td>88.0</td>\n",
              "      <td>April 1</td>\n",
              "      <td>2016</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4108</th>\n",
              "      <td>5580</td>\n",
              "      <td>80064521</td>\n",
              "      <td>Movie</td>\n",
              "      <td>Jeremy Scott: The People's Designer</td>\n",
              "      <td>Vlad Yudin</td>\n",
              "      <td>Jeremy Scott</td>\n",
              "      <td>United States</td>\n",
              "      <td>2015</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>109 min</td>\n",
              "      <td>Documentaries</td>\n",
              "      <td>The journey of fashion designer Jeremy Scott f...</td>\n",
              "      <td>109.0</td>\n",
              "      <td>April 1</td>\n",
              "      <td>2016</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4109 rows √ó 15 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0f3ffc2b-4c4a-497c-8c09-4e6a6e6347ed')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0f3ffc2b-4c4a-497c-8c09-4e6a6e6347ed button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0f3ffc2b-4c4a-497c-8c09-4e6a6e6347ed');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e2dc3914-aab4-4b54-9883-ad0cefa49472\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e2dc3914-aab4-4b54-9883-ad0cefa49472')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e2dc3914-aab4-4b54-9883-ad0cefa49472 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"new_df_1\",\n  \"rows\": 4109,\n  \"fields\": [\n    {\n      \"column\": \"index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1592,\n        \"min\": 0,\n        \"max\": 5580,\n        \"num_unique_values\": 4109,\n        \"samples\": [\n          2701,\n          4899,\n          3645\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"show_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12979304,\n        \"min\": 247747,\n        \"max\": 81235729,\n        \"num_unique_values\": 4109,\n        \"samples\": [\n          81062606,\n          80115686,\n          80084756\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Movie\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4085,\n        \"samples\": [\n          \"A Witches' Ball\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"director\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3190,\n        \"samples\": [\n          \"Han Han\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cast\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3660,\n        \"samples\": [\n          \"Madhampatti Rangaraj, Shweta Tripathi, Vela Ramamoorthy, Ankur Vikal, G. Marimuthu, Sunny Charles\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 475,\n        \"samples\": [\n          \"Serbia, South Korea, Slovenia\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"release_year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 1942,\n        \"max\": 2020,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          1991\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"TV-G\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 157,\n        \"samples\": [\n          \"30 min\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"listed_in\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 248,\n        \"samples\": [\n          \"Documentaries, International Movies\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4101,\n        \"samples\": [\n          \"Scientists research the world\\u2019s deadliest hurricane, trying to understand what this 18th-century storm could tell us about our own future.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"minute\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26.083989927400946,\n        \"min\": 19.0,\n        \"max\": 181.0,\n        \"num_unique_values\": 157,\n        \"samples\": [\n          30.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"day_published\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 362,\n        \"samples\": [\n          \"June 26\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year_published\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \" 2020\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 149
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(f'Old data length: {len(new_df)}')\n",
        "print(f'New data length: {len(new_df_1)}')\n",
        "print(f'Number of rows being removed: {len(new_df) - len(new_df)}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1MkbV6j0-Vfo",
        "outputId": "1eb83a97-ea6f-4a87-ac1a-7e2a995cfa42"
      },
      "execution_count": 150,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Old data length: 4109\n",
            "New data length: 4109\n",
            "Number of rows being removed: 0\n"
          ]
        }
      ]
    }
  ]
}